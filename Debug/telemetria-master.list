
telemetria-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e90  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006fd0  08006fd0  00007fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007210  08007210  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007210  08007210  00008210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007218  08007218  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007218  08007218  00008218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800721c  0800721c  0000821c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007220  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000070  08007290  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08007290  0000934c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bee6  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004131  00000000  00000000  00024f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  000290b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001466  00000000  00000000  0002ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbf4  00000000  00000000  0002bfde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c784  00000000  00000000  0004bbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb718  00000000  00000000  00068356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007420  00000000  00000000  00123ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0012aed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006fb8 	.word	0x08006fb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006fb8 	.word	0x08006fb8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff ffdb 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	2004      	movs	r0, #4
 800056c:	f7ff ffd8 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff ffd5 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2138      	movs	r1, #56	@ 0x38
 800057a:	480a      	ldr	r0, [pc, #40]	@ (80005a4 <MX_GPIO_Init+0x54>)
 800057c:	f002 f912 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000580:	2338      	movs	r3, #56	@ 0x38
 8000582:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800058c:	2303      	movs	r3, #3
 800058e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <MX_GPIO_Init+0x54>)
 8000596:	f001 ffa5 	bl	80024e4 <HAL_GPIO_Init>

}
 800059a:	bf00      	nop
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	48000800 	.word	0x48000800

080005a8 <LL_AHB2_GRP1_EnableClock>:
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4313      	orrs	r3, r2
 80005be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fc:	68fb      	ldr	r3, [r7, #12]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_I2C1_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <MX_I2C1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_I2C1_Init+0x74>)
 8000614:	4a1b      	ldr	r2, [pc, #108]	@ (8000684 <MX_I2C1_Init+0x7c>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0x3C << 1;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <MX_I2C1_Init+0x74>)
 800061a:	2278      	movs	r2, #120	@ 0x78
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_I2C1_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000642:	480e      	ldr	r0, [pc, #56]	@ (800067c <MX_I2C1_Init+0x74>)
 8000644:	f002 f8de 	bl	8002804 <HAL_I2C_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064e:	f000 fafb 	bl	8000c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <MX_I2C1_Init+0x74>)
 8000656:	f002 f970 	bl	800293a <HAL_I2CEx_ConfigAnalogFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000660:	f000 faf2 	bl	8000c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_I2C1_Init+0x74>)
 8000668:	f002 f9b1 	bl	80029ce <HAL_I2CEx_ConfigDigitalFilter>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 fae9 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000008c 	.word	0x2000008c
 8000680:	40005400 	.word	0x40005400
 8000684:	10805d88 	.word	0x10805d88

08000688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	@ 0x58
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2238      	movs	r2, #56	@ 0x38
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f006 f805 	bl	80066b8 <memset>
  if(i2cHandle->Instance==I2C1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a17      	ldr	r2, [pc, #92]	@ (8000710 <HAL_I2C_MspInit+0x88>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d126      	bne.n	8000706 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006b8:	2340      	movs	r3, #64	@ 0x40
 80006ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006bc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80006c0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fbe0 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006d2:	f000 fab9 	bl	8000c48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2002      	movs	r0, #2
 80006d8:	f7ff ff66 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80006dc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006e0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e2:	2312      	movs	r3, #18
 80006e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ee:	2304      	movs	r3, #4
 80006f0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006f6:	4619      	mov	r1, r3
 80006f8:	4806      	ldr	r0, [pc, #24]	@ (8000714 <HAL_I2C_MspInit+0x8c>)
 80006fa:	f001 fef3 	bl	80024e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000702:	f7ff ff69 	bl	80005d8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3758      	adds	r7, #88	@ 0x58
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40005400 	.word	0x40005400
 8000714:	48000400 	.word	0x48000400

08000718 <LL_AHB2_GRP1_EnableClock>:
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000724:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000726:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000734:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4013      	ands	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800073c:	68fb      	ldr	r3, [r7, #12]
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a2      	sub	sp, #136	@ 0x88
 800074c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f001 fcc5 	bl	80020dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f921 	bl	8000998 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  // Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff ffd7 	bl	8000718 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ffd4 	bl	8000718 <LL_AHB2_GRP1_EnableClock>

  // DEBUG_SUBGHZSPI_{NSSOUT, SCKOUT, MSIOOUT, MOSIOUT} pins
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000770:	23f0      	movs	r3, #240	@ 0xf0
 8000772:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 8000780:	230d      	movs	r3, #13
 8000782:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f001 feaa 	bl	80024e4 <HAL_GPIO_Init>

  // DEBUG_RF_{HSE32RDY, NRESET} pins
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000790:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000794:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000796:	230d      	movs	r3, #13
 8000798:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a2:	f001 fe9f 	bl	80024e4 <HAL_GPIO_Init>

  // DEBUG_RF_{SMPSRDY, LDORDY} pins
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4;
 80007a6:	2314      	movs	r3, #20
 80007a8:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	486b      	ldr	r0, [pc, #428]	@ (800095c <main+0x214>)
 80007b0:	f001 fe98 	bl	80024e4 <HAL_GPIO_Init>

  // RF_BUSY pin
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_BUSY;
 80007ba:	2306      	movs	r3, #6
 80007bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c6:	f001 fe8d 	bl	80024e4 <HAL_GPIO_Init>

  // RF_{IRQ0, IRQ1, IRQ2} pins
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
 80007ca:	f44f 7394 	mov.w	r3, #296	@ 0x128
 80007ce:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4861      	ldr	r0, [pc, #388]	@ (800095c <main+0x214>)
 80007d6:	f001 fe85 	bl	80024e4 <HAL_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f7ff feb9 	bl	8000550 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80007de:	f000 fb4d 	bl	8000e7c <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80007e2:	f000 fbdd 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007e6:	f000 fa65 	bl	8000cb4 <MX_SPI1_Init>
  MX_I2C1_Init();
 80007ea:	f7ff ff0d 	bl	8000608 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_GREEN);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f000 fcaa 	bl	8001148 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007f4:	2002      	movs	r0, #2
 80007f6:	f000 fca7 	bl	8001148 <BSP_LED_Init>

  strcpy(uartBuff, "\n\n\n\rTELEMETRIA MASTER - FORMULA TESLA UFMG\r\nVERSAO=1.0\r\n---------------\r\n");
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4a58      	ldr	r2, [pc, #352]	@ (8000960 <main+0x218>)
 8000800:	4618      	mov	r0, r3
 8000802:	4611      	mov	r1, r2
 8000804:	234a      	movs	r3, #74	@ 0x4a
 8000806:	461a      	mov	r2, r3
 8000808:	f005 ff8a 	bl	8006720 <memcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fcb5 	bl	8000180 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	f107 0114 	add.w	r1, r7, #20
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000822:	4850      	ldr	r0, [pc, #320]	@ (8000964 <main+0x21c>)
 8000824:	f005 f96f 	bl	8005b06 <HAL_UART_Transmit>
  sprintf(uartBuff, "LORA_MODULATION\r\nLORA_BW=%d Hz\r\nLORA_SF=%d\r\nTX_OUTPUT_POWER= %d dBm", (1 << LORA_BANDWIDTH) * 125, LORA_SPREADING_FACTOR, TX_OUTPUT_POWER);
 8000828:	f107 0014 	add.w	r0, r7, #20
 800082c:	230e      	movs	r3, #14
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2307      	movs	r3, #7
 8000832:	227d      	movs	r2, #125	@ 0x7d
 8000834:	494c      	ldr	r1, [pc, #304]	@ (8000968 <main+0x220>)
 8000836:	f005 ff1f 	bl	8006678 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fc9e 	bl	8000180 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0114 	add.w	r1, r7, #20
 800084c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000850:	4844      	ldr	r0, [pc, #272]	@ (8000964 <main+0x21c>)
 8000852:	f005 f958 	bl	8005b06 <HAL_UART_Transmit>
  radioInit();
 8000856:	f000 f8f1 	bl	8000a3c <radioInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800085a:	2300      	movs	r3, #0
 800085c:	2200      	movs	r2, #0
 800085e:	f240 2101 	movw	r1, #513	@ 0x201
 8000862:	f240 2001 	movw	r0, #513	@ 0x201
 8000866:	f000 ff6f 	bl	8001748 <SUBGRF_SetDioIrqParams>
                         IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                         IRQ_RADIO_NONE,
                         IRQ_RADIO_NONE);

  // Inicia recepção IT
  HAL_SPI_Receive_IT(&hspi1, rxData, 8);
 800086a:	2208      	movs	r2, #8
 800086c:	493f      	ldr	r1, [pc, #252]	@ (800096c <main+0x224>)
 800086e:	4840      	ldr	r0, [pc, #256]	@ (8000970 <main+0x228>)
 8000870:	f003 fcfa 	bl	8004268 <HAL_SPI_Receive_IT>
  while (1)
  {

	//_i2c1_receivemsg(txBuf, 8);

	txDone = txTimeout = false;
 8000874:	2100      	movs	r1, #0
 8000876:	4b3f      	ldr	r3, [pc, #252]	@ (8000974 <main+0x22c>)
 8000878:	460a      	mov	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	4b3e      	ldr	r3, [pc, #248]	@ (8000978 <main+0x230>)
 800087e:	460a      	mov	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000882:	2101      	movs	r1, #1
 8000884:	2001      	movs	r0, #1
 8000886:	f001 fb0b 	bl	8001ea0 <SUBGRF_SetSwitch>
	SUBGRF_SendPayload(txBuf, sizeof(txBuf), 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2108      	movs	r1, #8
 800088e:	483b      	ldr	r0, [pc, #236]	@ (800097c <main+0x234>)
 8000890:	f000 fe18 	bl	80014c4 <SUBGRF_SendPayload>

	while (!txDone && !txTimeout);
 8000894:	bf00      	nop
 8000896:	4b38      	ldr	r3, [pc, #224]	@ (8000978 <main+0x230>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f083 0301 	eor.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d007      	beq.n	80008b6 <main+0x16e>
 80008a6:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <main+0x22c>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f083 0301 	eor.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1ef      	bne.n	8000896 <main+0x14e>

	if (txTimeout) {
 80008b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000974 <main+0x22c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d003      	beq.n	80008c8 <main+0x180>
		status = "TIMEOUT";
 80008c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <main+0x238>)
 80008c2:	4a30      	ldr	r2, [pc, #192]	@ (8000984 <main+0x23c>)
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e00b      	b.n	80008e0 <main+0x198>
	} else if (txDone) {
 80008c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <main+0x230>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <main+0x192>
		status = "OK";
 80008d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000980 <main+0x238>)
 80008d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000988 <main+0x240>)
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	e002      	b.n	80008e0 <main+0x198>
	} else {
		status = "DESCONHECIDO";
 80008da:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <main+0x238>)
 80008dc:	4a2b      	ldr	r2, [pc, #172]	@ (800098c <main+0x244>)
 80008de:	601a      	str	r2, [r3, #0]
	}
	int len = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	67fb      	str	r3, [r7, #124]	@ 0x7c

	len += sprintf(uartBuff + len,
 80008e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	18d0      	adds	r0, r2, r3
 80008ec:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <main+0x238>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	2308      	movs	r3, #8
 80008f2:	4927      	ldr	r1, [pc, #156]	@ (8000990 <main+0x248>)
 80008f4:	f005 fec0 	bl	8006678 <siprintf>
 80008f8:	4602      	mov	r2, r0
 80008fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008fc:	4413      	add	r3, r2
 80008fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
	 "\r\n\r\n"
	 "Status: %s\r\n"
	 "Payload (%d bytes): ",
	 status, (int)sizeof(txBuf));

	for (int i = 0; i < sizeof(txBuf); i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000904:	e012      	b.n	800092c <main+0x1e4>
	 len += sprintf(uartBuff + len, "%02X ", txBuf[i]);
 8000906:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000908:	f107 0214 	add.w	r2, r7, #20
 800090c:	18d0      	adds	r0, r2, r3
 800090e:	4a1b      	ldr	r2, [pc, #108]	@ (800097c <main+0x234>)
 8000910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	491e      	ldr	r1, [pc, #120]	@ (8000994 <main+0x24c>)
 800091a:	f005 fead 	bl	8006678 <siprintf>
 800091e:	4602      	mov	r2, r0
 8000920:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000922:	4413      	add	r3, r2
 8000924:	67fb      	str	r3, [r7, #124]	@ 0x7c
	for (int i = 0; i < sizeof(txBuf); i++) {
 8000926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000928:	3301      	adds	r3, #1
 800092a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800092c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800092e:	2b07      	cmp	r3, #7
 8000930:	d9e9      	bls.n	8000906 <main+0x1be>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuff, len, HAL_MAX_DELAY);
 8000932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000934:	b29a      	uxth	r2, r3
 8000936:	f107 0114 	add.w	r1, r7, #20
 800093a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800093e:	4809      	ldr	r0, [pc, #36]	@ (8000964 <main+0x21c>)
 8000940:	f005 f8e1 	bl	8005b06 <HAL_UART_Transmit>

	if (txDone) {
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <main+0x230>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <main+0x20c>
	 BSP_LED_Toggle(LED_GREEN);
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fc34 	bl	80011bc <BSP_LED_Toggle>
	}

	HAL_Delay(POLL_DELAY_MS);
 8000954:	2064      	movs	r0, #100	@ 0x64
 8000956:	f001 fc37 	bl	80021c8 <HAL_Delay>
  {
 800095a:	e78b      	b.n	8000874 <main+0x12c>
 800095c:	48000400 	.word	0x48000400
 8000960:	08006fd0 	.word	0x08006fd0
 8000964:	20000164 	.word	0x20000164
 8000968:	0800701c 	.word	0x0800701c
 800096c:	200000e4 	.word	0x200000e4
 8000970:	200000f0 	.word	0x200000f0
 8000974:	200000e1 	.word	0x200000e1
 8000978:	200000e0 	.word	0x200000e0
 800097c:	20000000 	.word	0x20000000
 8000980:	200000ec 	.word	0x200000ec
 8000984:	08007060 	.word	0x08007060
 8000988:	08007068 	.word	0x08007068
 800098c:	0800706c 	.word	0x0800706c
 8000990:	0800707c 	.word	0x0800707c
 8000994:	080070a4 	.word	0x080070a4

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b09a      	sub	sp, #104	@ 0x68
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2248      	movs	r2, #72	@ 0x48
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 fe86 	bl	80066b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <SystemClock_Config+0xa0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80009c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a38 <SystemClock_Config+0xa0>)
 80009c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <SystemClock_Config+0xa0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009da:	2320      	movs	r3, #32
 80009dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009de:	2301      	movs	r3, #1
 80009e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80009e6:	23b0      	movs	r3, #176	@ 0xb0
 80009e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fb08 	bl	8003008 <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f923 	bl	8000c48 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000a02:	234f      	movs	r3, #79	@ 0x4f
 8000a04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 fe74 	bl	800370c <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a2a:	f000 f90d 	bl	8000c48 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3768      	adds	r7, #104	@ 0x68
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	58000400 	.word	0x58000400

08000a3c <radioInit>:
/**
  * @brief  Initialize the Sub-GHz radio and dependent hardware.
  * @retval None
  */
void radioInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
  SUBGRF_Init(RadioOnDioIrq);
 8000a42:	4820      	ldr	r0, [pc, #128]	@ (8000ac4 <radioInit+0x88>)
 8000a44:	f000 fce6 	bl	8001414 <SUBGRF_Init>

  SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f001 f982 	bl	8001d54 <SUBGRF_SetBufferBaseAddress>

  SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8000a50:	481d      	ldr	r0, [pc, #116]	@ (8000ac8 <radioInit+0x8c>)
 8000a52:	f000 fed5 	bl	8001800 <SUBGRF_SetRfFrequency>
  SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8000a56:	200e      	movs	r0, #14
 8000a58:	f001 fa4a 	bl	8001ef0 <SUBGRF_SetRfTxPower>

  SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 ff15 	bl	800188c <SUBGRF_SetPacketType>

  ModulationParams_t modParams = {
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	619a      	str	r2, [r3, #24]
 8000a76:	2301      	movs	r3, #1
 8000a78:	753b      	strb	r3, [r7, #20]
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000a80:	2304      	movs	r3, #4
 8000a82:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000a86:	2301      	movs	r3, #1
 8000a88:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      .CodingRate          = LORA_CR_4_5,
      .SpreadingFactor     = LORA_SF7,
      .LowDatarateOptimize = 0
    }
  };
  SUBGRF_SetModulationParams(&modParams);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 ffef 	bl	8001a74 <SUBGRF_SetModulationParams>

  PacketParams_t pktParams = {
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	703b      	strb	r3, [r7, #0]
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	81fb      	strh	r3, [r7, #14]
 8000aac:	23ff      	movs	r3, #255	@ 0xff
 8000aae:	747b      	strb	r3, [r7, #17]
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	74bb      	strb	r3, [r7, #18]
      .InvertIQ       = LORA_IQ_NORMAL,
      .PayloadLength  = 0xFF,          // valor “max” genérico
      .PreambleLength = LORA_PREAMBLE_LENGTH
    }
  };
  SUBGRF_SetPacketParams(&pktParams);
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f8ae 	bl	8001c18 <SUBGRF_SetPacketParams>
}
 8000abc:	bf00      	nop
 8000abe:	3730      	adds	r7, #48	@ 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	08000acd 	.word	0x08000acd
 8000ac8:	33bca100 	.word	0x33bca100

08000acc <RadioOnDioIrq>:
  * @brief  Receive data trough SUBGHZSPI peripheral
  * @param  radioIrq  interrupt pending status information
  * @retval None
  */
void RadioOnDioIrq(RadioIrqMasks_t irq)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
  if(irq == IRQ_TX_DONE)        txDone    = true;
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d103      	bne.n	8000ae4 <RadioOnDioIrq+0x18>
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <RadioOnDioIrq+0x30>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
  else if(irq == IRQ_RX_TX_TIMEOUT) txTimeout = true;
}
 8000ae2:	e006      	b.n	8000af2 <RadioOnDioIrq+0x26>
  else if(irq == IRQ_RX_TX_TIMEOUT) txTimeout = true;
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000aea:	d102      	bne.n	8000af2 <RadioOnDioIrq+0x26>
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <RadioOnDioIrq+0x34>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	200000e0 	.word	0x200000e0
 8000b00:	200000e1 	.word	0x200000e1

08000b04 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	@ 0x50
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a31      	ldr	r2, [pc, #196]	@ (8000bd4 <HAL_SPI_RxCpltCallback+0xd0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d15a      	bne.n	8000bca <HAL_SPI_RxCpltCallback+0xc6>
  {
    char uartBuff[64];
    uint16_t len;

    len = sprintf(uartBuff, "RxCplt: OK\r\n");
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	492f      	ldr	r1, [pc, #188]	@ (8000bd8 <HAL_SPI_RxCpltCallback+0xd4>)
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fdac 	bl	8006678 <siprintf>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    HAL_UART_Transmit(&huart2, (uint8_t*)uartBuff, len, HAL_MAX_DELAY);
 8000b26:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000b2a:	f107 0108 	add.w	r1, r7, #8
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b32:	482a      	ldr	r0, [pc, #168]	@ (8000bdc <HAL_SPI_RxCpltCallback+0xd8>)
 8000b34:	f004 ffe7 	bl	8005b06 <HAL_UART_Transmit>

    len = sprintf(uartBuff, "Received: ");
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	4928      	ldr	r1, [pc, #160]	@ (8000be0 <HAL_SPI_RxCpltCallback+0xdc>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f005 fd9a 	bl	8006678 <siprintf>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    HAL_UART_Transmit(&huart2, (uint8_t*)uartBuff, len, HAL_MAX_DELAY);
 8000b4a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000b4e:	f107 0108 	add.w	r1, r7, #8
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b56:	4821      	ldr	r0, [pc, #132]	@ (8000bdc <HAL_SPI_RxCpltCallback+0xd8>)
 8000b58:	f004 ffd5 	bl	8005b06 <HAL_UART_Transmit>

    for (int i = 0; i < 8; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b60:	e019      	b.n	8000b96 <HAL_SPI_RxCpltCallback+0x92>
    {
      len = sprintf(uartBuff, "%u ", rxData[i]);
 8000b62:	4a20      	ldr	r2, [pc, #128]	@ (8000be4 <HAL_SPI_RxCpltCallback+0xe0>)
 8000b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	491d      	ldr	r1, [pc, #116]	@ (8000be8 <HAL_SPI_RxCpltCallback+0xe4>)
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 fd80 	bl	8006678 <siprintf>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      HAL_UART_Transmit(&huart2, (uint8_t*)uartBuff, len, HAL_MAX_DELAY);
 8000b7e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000b82:	f107 0108 	add.w	r1, r7, #8
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b8a:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <HAL_SPI_RxCpltCallback+0xd8>)
 8000b8c:	f004 ffbb 	bl	8005b06 <HAL_UART_Transmit>
    for (int i = 0; i < 8; i++)
 8000b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b92:	3301      	adds	r3, #1
 8000b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b98:	2b07      	cmp	r3, #7
 8000b9a:	dde2      	ble.n	8000b62 <HAL_SPI_RxCpltCallback+0x5e>
    }

    len = sprintf(uartBuff, "\r\n");
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4912      	ldr	r1, [pc, #72]	@ (8000bec <HAL_SPI_RxCpltCallback+0xe8>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f005 fd68 	bl	8006678 <siprintf>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    HAL_UART_Transmit(&huart2, (uint8_t*)uartBuff, len, HAL_MAX_DELAY);
 8000bae:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000bb2:	f107 0108 	add.w	r1, r7, #8
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bba:	4808      	ldr	r0, [pc, #32]	@ (8000bdc <HAL_SPI_RxCpltCallback+0xd8>)
 8000bbc:	f004 ffa3 	bl	8005b06 <HAL_UART_Transmit>

    HAL_SPI_Receive_IT(&hspi1, rxData, 8);
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	4908      	ldr	r1, [pc, #32]	@ (8000be4 <HAL_SPI_RxCpltCallback+0xe0>)
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <HAL_SPI_RxCpltCallback+0xd0>)
 8000bc6:	f003 fb4f 	bl	8004268 <HAL_SPI_Receive_IT>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3750      	adds	r7, #80	@ 0x50
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000f0 	.word	0x200000f0
 8000bd8:	080070ac 	.word	0x080070ac
 8000bdc:	20000164 	.word	0x20000164
 8000be0:	080070bc 	.word	0x080070bc
 8000be4:	200000e4 	.word	0x200000e4
 8000be8:	080070c8 	.word	0x080070c8
 8000bec:	080070cc 	.word	0x080070cc

08000bf0 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b094      	sub	sp, #80	@ 0x50
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <HAL_SPI_ErrorCallback+0x48>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d116      	bne.n	8000c2e <HAL_SPI_ErrorCallback+0x3e>
  {
    char uartBuff[64];
    uint16_t len;

    len = sprintf(uartBuff, "SPI Error\r\n");
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <HAL_SPI_ErrorCallback+0x4c>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f005 fd36 	bl	8006678 <siprintf>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    HAL_UART_Transmit(&huart2, (uint8_t*)uartBuff, len, HAL_MAX_DELAY);
 8000c12:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000c16:	f107 010c 	add.w	r1, r7, #12
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c1e:	4808      	ldr	r0, [pc, #32]	@ (8000c40 <HAL_SPI_ErrorCallback+0x50>)
 8000c20:	f004 ff71 	bl	8005b06 <HAL_UART_Transmit>

    HAL_SPI_Receive_IT(&hspi1, rxData, 8);
 8000c24:	2208      	movs	r2, #8
 8000c26:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <HAL_SPI_ErrorCallback+0x54>)
 8000c28:	4803      	ldr	r0, [pc, #12]	@ (8000c38 <HAL_SPI_ErrorCallback+0x48>)
 8000c2a:	f003 fb1d 	bl	8004268 <HAL_SPI_Receive_IT>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3750      	adds	r7, #80	@ 0x50
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000f0 	.word	0x200000f0
 8000c3c:	080070d0 	.word	0x080070d0
 8000c40:	20000164 	.word	0x20000164
 8000c44:	200000e4 	.word	0x200000e4

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <Error_Handler+0x8>

08000c54 <LL_AHB2_GRP1_EnableClock>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c78:	68fb      	ldr	r3, [r7, #12]
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cba:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <MX_SPI1_Init+0x6c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000ccc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_SPI1_Init+0x68>)
 8000d0a:	f003 f9d9 	bl	80040c0 <HAL_SPI_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000d14:	f7ff ff98 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000f0 	.word	0x200000f0
 8000d20:	40013000 	.word	0x40013000

08000d24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1d      	ldr	r2, [pc, #116]	@ (8000db8 <HAL_SPI_MspInit+0x94>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d133      	bne.n	8000dae <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d46:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000d4a:	f7ff ff9b 	bl	8000c84 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff ff80 	bl	8000c54 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	2002      	movs	r0, #2
 8000d56:	f7ff ff7d 	bl	8000c54 <LL_AHB2_GRP1_EnableClock>
    PA12     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    PA11     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
 8000d5a:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8000d5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7a:	f001 fbb3 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4619      	mov	r1, r3
 8000d98:	4808      	ldr	r0, [pc, #32]	@ (8000dbc <HAL_SPI_MspInit+0x98>)
 8000d9a:	f001 fba3 	bl	80024e4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2022      	movs	r0, #34	@ 0x22
 8000da4:	f001 fb0b 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000da8:	2022      	movs	r0, #34	@ 0x22
 8000daa:	f001 fb22 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f001 f9b8 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <SPI1_IRQHandler+0x10>)
 8000e2a:	f003 fbc9 	bl	80045c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000f0 	.word	0x200000f0

08000e38 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000e3e:	f004 fc4f 	bl	80056e0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000154 	.word	0x20000154

08000e4c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e68:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e70:	68fb      	ldr	r3, [r7, #12]
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_SUBGHZ_Init+0x20>)
 8000e82:	2208      	movs	r2, #8
 8000e84:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_SUBGHZ_Init+0x20>)
 8000e88:	f004 fa00 	bl	800528c <HAL_SUBGHZ_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000e92:	f7ff fed9 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000154 	.word	0x20000154

08000ea0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ffcf 	bl	8000e4c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2032      	movs	r0, #50	@ 0x32
 8000eb4:	f001 fa83 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000eb8:	2032      	movs	r0, #50	@ 0x32
 8000eba:	f001 fa9a 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f005 fbe6 	bl	80066c8 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20010000 	.word	0x20010000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000160 	.word	0x20000160
 8000f30:	20000350 	.word	0x20000350

08000f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <LL_AHB2_GRP1_EnableClock>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f64:	68fb      	ldr	r3, [r7, #12]
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <LL_APB1_GRP1_EnableClock>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f94:	68fb      	ldr	r3, [r7, #12]
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fa6:	4a23      	ldr	r2, [pc, #140]	@ (8001034 <MX_USART2_UART_Init+0x94>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe8:	4811      	ldr	r0, [pc, #68]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000fea:	f004 fd3c 	bl	8005a66 <HAL_UART_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ff4:	f7ff fe28 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480d      	ldr	r0, [pc, #52]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 8000ffc:	f005 fa73 	bl	80064e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001006:	f7ff fe1f 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 800100e:	f005 faa8 	bl	8006562 <HAL_UARTEx_SetRxFifoThreshold>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001018:	f7ff fe16 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <MX_USART2_UART_Init+0x90>)
 800101e:	f005 fa2a 	bl	8006476 <HAL_UARTEx_DisableFifoMode>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001028:	f7ff fe0e 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000164 	.word	0x20000164
 8001034:	40004400 	.word	0x40004400

08001038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b096      	sub	sp, #88	@ 0x58
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2238      	movs	r2, #56	@ 0x38
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f005 fb2d 	bl	80066b8 <memset>
  if(uartHandle->Instance==USART2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <HAL_UART_MspInit+0x88>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d126      	bne.n	80010b6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001068:	2302      	movs	r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800106c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001070:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4618      	mov	r0, r3
 8001078:	f002 ff08 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001082:	f7ff fde1 	bl	8000c48 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001086:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800108a:	f7ff ff71 	bl	8000f70 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff ff56 	bl	8000f40 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001094:	230c      	movs	r3, #12
 8001096:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a4:	2307      	movs	r3, #7
 80010a6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b2:	f001 fa17 	bl	80024e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3758      	adds	r7, #88	@ 0x58
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40004400 	.word	0x40004400

080010c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c8:	f7ff ff34 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f2:	f005 faef 	bl	80066d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f6:	f7ff fb27 	bl	8000748 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001108:	08007220 	.word	0x08007220
  ldr r2, =_sbss
 800110c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001110:	2000034c 	.word	0x2000034c

08001114 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>

08001116 <LL_AHB2_GRP1_EnableClock>:
{
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001124:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4313      	orrs	r3, r2
 800112c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001132:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4013      	ands	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
	...

08001148 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001162:	2002      	movs	r0, #2
 8001164:	f7ff ffd7 	bl	8001116 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <BSP_LED_Init+0x6c>)
 800116c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001170:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <BSP_LED_Init+0x70>)
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f001 f9a9 	bl	80024e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <BSP_LED_Init+0x70>)
 8001196:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <BSP_LED_Init+0x6c>)
 800119e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	f001 fafd 	bl	80027a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	080071ac 	.word	0x080071ac
 80011b8:	2000000c 	.word	0x2000000c

080011bc <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <BSP_LED_Toggle+0x2c>)
 80011ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4906      	ldr	r1, [pc, #24]	@ (80011ec <BSP_LED_Toggle+0x30>)
 80011d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4610      	mov	r0, r2
 80011da:	f001 fafa 	bl	80027d2 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000000c 	.word	0x2000000c
 80011ec:	080071ac 	.word	0x080071ac

080011f0 <LL_AHB2_GRP1_EnableClock>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800120c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001214:	68fb      	ldr	r3, [r7, #12]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001234:	2004      	movs	r0, #4
 8001236:	f7ff ffdb 	bl	80011f0 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800123a:	2310      	movs	r3, #16
 800123c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4812      	ldr	r0, [pc, #72]	@ (8001298 <BSP_RADIO_Init+0x78>)
 8001250:	f001 f948 	bl	80024e4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001254:	2320      	movs	r3, #32
 8001256:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	480e      	ldr	r0, [pc, #56]	@ (8001298 <BSP_RADIO_Init+0x78>)
 800125e:	f001 f941 	bl	80024e4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001262:	2308      	movs	r3, #8
 8001264:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	480b      	ldr	r0, [pc, #44]	@ (8001298 <BSP_RADIO_Init+0x78>)
 800126c:	f001 f93a 	bl	80024e4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001270:	2200      	movs	r2, #0
 8001272:	2120      	movs	r1, #32
 8001274:	4808      	ldr	r0, [pc, #32]	@ (8001298 <BSP_RADIO_Init+0x78>)
 8001276:	f001 fa95 	bl	80027a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800127a:	2200      	movs	r2, #0
 800127c:	2110      	movs	r1, #16
 800127e:	4806      	ldr	r0, [pc, #24]	@ (8001298 <BSP_RADIO_Init+0x78>)
 8001280:	f001 fa90 	bl	80027a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001284:	2200      	movs	r2, #0
 8001286:	2108      	movs	r1, #8
 8001288:	4803      	ldr	r0, [pc, #12]	@ (8001298 <BSP_RADIO_Init+0x78>)
 800128a:	f001 fa8b 	bl	80027a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	48000800 	.word	0x48000800

0800129c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d84b      	bhi.n	8001344 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80012ac:	a201      	add	r2, pc, #4	@ (adr r2, 80012b4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012e5 	.word	0x080012e5
 80012bc:	08001305 	.word	0x08001305
 80012c0:	08001325 	.word	0x08001325
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2108      	movs	r1, #8
 80012c8:	4821      	ldr	r0, [pc, #132]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012ca:	f001 fa6b 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2110      	movs	r1, #16
 80012d2:	481f      	ldr	r0, [pc, #124]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012d4:	f001 fa66 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2120      	movs	r1, #32
 80012dc:	481c      	ldr	r0, [pc, #112]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012de:	f001 fa61 	bl	80027a4 <HAL_GPIO_WritePin>
      break;      
 80012e2:	e030      	b.n	8001346 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2108      	movs	r1, #8
 80012e8:	4819      	ldr	r0, [pc, #100]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012ea:	f001 fa5b 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80012ee:	2201      	movs	r2, #1
 80012f0:	2110      	movs	r1, #16
 80012f2:	4817      	ldr	r0, [pc, #92]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012f4:	f001 fa56 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80012f8:	2200      	movs	r2, #0
 80012fa:	2120      	movs	r1, #32
 80012fc:	4814      	ldr	r0, [pc, #80]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012fe:	f001 fa51 	bl	80027a4 <HAL_GPIO_WritePin>
      break;
 8001302:	e020      	b.n	8001346 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2108      	movs	r1, #8
 8001308:	4811      	ldr	r0, [pc, #68]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800130a:	f001 fa4b 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800130e:	2201      	movs	r2, #1
 8001310:	2110      	movs	r1, #16
 8001312:	480f      	ldr	r0, [pc, #60]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001314:	f001 fa46 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001318:	2201      	movs	r2, #1
 800131a:	2120      	movs	r1, #32
 800131c:	480c      	ldr	r0, [pc, #48]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800131e:	f001 fa41 	bl	80027a4 <HAL_GPIO_WritePin>
      break;
 8001322:	e010      	b.n	8001346 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2108      	movs	r1, #8
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800132a:	f001 fa3b 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800132e:	2200      	movs	r2, #0
 8001330:	2110      	movs	r1, #16
 8001332:	4807      	ldr	r0, [pc, #28]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001334:	f001 fa36 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001338:	2201      	movs	r2, #1
 800133a:	2120      	movs	r1, #32
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800133e:	f001 fa31 	bl	80027a4 <HAL_GPIO_WritePin>
      break;
 8001342:	e000      	b.n	8001346 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001344:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	48000800 	.word	0x48000800

08001354 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800138e:	230f      	movs	r3, #15
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e001      	b.n	8001398 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001394:	2316      	movs	r3, #22
 8001396:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001398:	68fb      	ldr	r3, [r7, #12]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80013a8:	f7ff ff3a 	bl	8001220 <BSP_RADIO_Init>
 80013ac:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff6c 	bl	800129c <BSP_RADIO_ConfigRFSwitch>
 80013c4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80013d2:	f7ff ffbf 	bl	8001354 <BSP_RADIO_GetTxConfig>
 80013d6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80013d8:	4618      	mov	r0, r3
 80013da:	bd80      	pop	{r7, pc}

080013dc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80013e0:	f7ff ffbf 	bl	8001362 <BSP_RADIO_IsTCXO>
 80013e4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}

080013ea <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80013ee:	f7ff ffbf 	bl	8001370 <BSP_RADIO_IsDCDC>
 80013f2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ffba 	bl	800137e <BSP_RADIO_GetRFOMaxPowerConfig>
 800140a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8001422:	4a1d      	ldr	r2, [pc, #116]	@ (8001498 <SUBGRF_Init+0x84>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8001428:	f7ff fd28 	bl	8000e7c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800142c:	2002      	movs	r0, #2
 800142e:	f000 fe33 	bl	8002098 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <SUBGRF_Init+0x88>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8001438:	2000      	movs	r0, #0
 800143a:	f000 f897 	bl	800156c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800143e:	f7ff ffcd 	bl	80013dc <RBI_IsTCXO>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d10e      	bne.n	8001466 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8001448:	2140      	movs	r1, #64	@ 0x40
 800144a:	2001      	movs	r0, #1
 800144c:	f000 f9b6 	bl	80017bc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8001450:	2100      	movs	r1, #0
 8001452:	f640 1011 	movw	r0, #2321	@ 0x911
 8001456:	f000 fc95 	bl	8001d84 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800145a:	237f      	movs	r3, #127	@ 0x7f
 800145c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800145e:	7b38      	ldrb	r0, [r7, #12]
 8001460:	f000 f8c0 	bl	80015e4 <SUBGRF_Calibrate>
 8001464:	e009      	b.n	800147a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001466:	2120      	movs	r1, #32
 8001468:	f640 1011 	movw	r0, #2321	@ 0x911
 800146c:	f000 fc8a 	bl	8001d84 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001470:	2120      	movs	r1, #32
 8001472:	f640 1012 	movw	r0, #2322	@ 0x912
 8001476:	f000 fc85 	bl	8001d84 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800147a:	210e      	movs	r1, #14
 800147c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8001480:	f000 fc80 	bl	8001d84 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8001484:	f7ff ff8e 	bl	80013a4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SUBGRF_Init+0x8c>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200001fc 	.word	0x200001fc
 800149c:	200001fb 	.word	0x200001fb
 80014a0:	200001f8 	.word	0x200001f8

080014a4 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	461a      	mov	r2, r3
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fcae 	bl	8001e18 <SUBGRF_WriteBuffer>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <SUBGRF_SendPayload>:

    return 0;
}

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	460b      	mov	r3, r1
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	4619      	mov	r1, r3
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f7ff ffe4 	bl	80014a4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f861 	bl	80015a4 <SUBGRF_SetTx>
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001504:	f000 f9de 	bl	80018c4 <SUBGRF_GetPacketType>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d108      	bne.n	8001520 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2202      	movs	r2, #2
 8001514:	4619      	mov	r1, r3
 8001516:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800151a:	f000 fc5b 	bl	8001dd4 <SUBGRF_WriteRegisters>
            break;
 800151e:	e000      	b.n	8001522 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8001520:	bf00      	nop
    }
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001544:	f000 f9be 	bl	80018c4 <SUBGRF_GetPacketType>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d108      	bne.n	8001560 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	2202      	movs	r2, #2
 8001554:	4619      	mov	r1, r3
 8001556:	f240 60be 	movw	r0, #1726	@ 0x6be
 800155a:	f000 fc3b 	bl	8001dd4 <SUBGRF_WriteRegisters>
            break;
 800155e:	e000      	b.n	8001562 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8001560:	bf00      	nop
    }
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	2080      	movs	r0, #128	@ 0x80
 800157e:	f000 fc6d 	bl	8001e5c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SUBGRF_SetStandby+0x34>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800158e:	e002      	b.n	8001596 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <SUBGRF_SetStandby+0x34>)
 8001592:	2202      	movs	r2, #2
 8001594:	701a      	strb	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001f8 	.word	0x200001f8

080015a4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <SUBGRF_SetTx+0x3c>)
 80015ae:	2204      	movs	r2, #4
 80015b0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0c1b      	lsrs	r3, r3, #16
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2203      	movs	r2, #3
 80015ce:	4619      	mov	r1, r3
 80015d0:	2083      	movs	r0, #131	@ 0x83
 80015d2:	f000 fc43 	bl	8001e5c <SUBGRF_WriteCommand>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001f8 	.word	0x200001f8

080015e4 <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80015ec:	793b      	ldrb	r3, [r7, #4]
 80015ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	019b      	lsls	r3, r3, #6
 80015f6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80015f8:	793b      	ldrb	r3, [r7, #4]
 80015fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001602:	b25b      	sxtb	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001608:	793b      	ldrb	r3, [r7, #4]
 800160a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001612:	b25b      	sxtb	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001618:	793b      	ldrb	r3, [r7, #4]
 800161a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001622:	b25b      	sxtb	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001628:	793b      	ldrb	r3, [r7, #4]
 800162a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001632:	b25b      	sxtb	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001638:	793b      	ldrb	r3, [r7, #4]
 800163a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001642:	b25b      	sxtb	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8001648:	793b      	ldrb	r3, [r7, #4]
 800164a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001652:	4313      	orrs	r3, r2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001658:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800165a:	f107 030f 	add.w	r3, r7, #15
 800165e:	2201      	movs	r2, #1
 8001660:	4619      	mov	r1, r3
 8001662:	2089      	movs	r0, #137	@ 0x89
 8001664:	f000 fbfa 	bl	8001e5c <SUBGRF_WriteCommand>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a1d      	ldr	r2, [pc, #116]	@ (80016f0 <SUBGRF_CalibrateImage+0x80>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d904      	bls.n	800168a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8001680:	23e1      	movs	r3, #225	@ 0xe1
 8001682:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001684:	23e9      	movs	r3, #233	@ 0xe9
 8001686:	737b      	strb	r3, [r7, #13]
 8001688:	e027      	b.n	80016da <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <SUBGRF_CalibrateImage+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d904      	bls.n	800169c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8001692:	23d7      	movs	r3, #215	@ 0xd7
 8001694:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8001696:	23db      	movs	r3, #219	@ 0xdb
 8001698:	737b      	strb	r3, [r7, #13]
 800169a:	e01e      	b.n	80016da <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a16      	ldr	r2, [pc, #88]	@ (80016f8 <SUBGRF_CalibrateImage+0x88>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d904      	bls.n	80016ae <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80016a4:	23c1      	movs	r3, #193	@ 0xc1
 80016a6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80016a8:	23c5      	movs	r3, #197	@ 0xc5
 80016aa:	737b      	strb	r3, [r7, #13]
 80016ac:	e015      	b.n	80016da <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <SUBGRF_CalibrateImage+0x8c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d904      	bls.n	80016c0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80016b6:	2375      	movs	r3, #117	@ 0x75
 80016b8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80016ba:	2381      	movs	r3, #129	@ 0x81
 80016bc:	737b      	strb	r3, [r7, #13]
 80016be:	e00c      	b.n	80016da <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <SUBGRF_CalibrateImage+0x90>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d904      	bls.n	80016d2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80016c8:	236b      	movs	r3, #107	@ 0x6b
 80016ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80016cc:	236f      	movs	r3, #111	@ 0x6f
 80016ce:	737b      	strb	r3, [r7, #13]
 80016d0:	e003      	b.n	80016da <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80016d2:	2329      	movs	r3, #41	@ 0x29
 80016d4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80016d6:	232b      	movs	r3, #43	@ 0x2b
 80016d8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2202      	movs	r2, #2
 80016e0:	4619      	mov	r1, r3
 80016e2:	2098      	movs	r0, #152	@ 0x98
 80016e4:	f000 fbba 	bl	8001e5c <SUBGRF_WriteCommand>
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	35a4e900 	.word	0x35a4e900
 80016f4:	32a9f880 	.word	0x32a9f880
 80016f8:	2de54480 	.word	0x2de54480
 80016fc:	1b6b0b00 	.word	0x1b6b0b00
 8001700:	1954fc40 	.word	0x1954fc40

08001704 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	4603      	mov	r3, r0
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	717b      	strb	r3, [r7, #5]
 800171e:	4613      	mov	r3, r2
 8001720:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800172a:	797b      	ldrb	r3, [r7, #5]
 800172c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800172e:	793b      	ldrb	r3, [r7, #4]
 8001730:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2204      	movs	r2, #4
 8001738:	4619      	mov	r1, r3
 800173a:	2095      	movs	r0, #149	@ 0x95
 800173c:	f000 fb8e 	bl	8001e5c <SUBGRF_WriteCommand>
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	4604      	mov	r4, r0
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4623      	mov	r3, r4
 8001758:	80fb      	strh	r3, [r7, #6]
 800175a:	4603      	mov	r3, r0
 800175c:	80bb      	strh	r3, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	807b      	strh	r3, [r7, #2]
 8001762:	4613      	mov	r3, r2
 8001764:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	b29b      	uxth	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001796:	883b      	ldrh	r3, [r7, #0]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	b29b      	uxth	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80017a0:	883b      	ldrh	r3, [r7, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	2208      	movs	r2, #8
 80017ac:	4619      	mov	r1, r3
 80017ae:	2008      	movs	r0, #8
 80017b0:	f000 fb54 	bl	8001e5c <SUBGRF_WriteCommand>
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}

080017bc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2204      	movs	r2, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	2097      	movs	r0, #151	@ 0x97
 80017f2:	f000 fb33 	bl	8001e5c <SUBGRF_WriteCommand>
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001800:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <SUBGRF_SetRfFrequency+0x84>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f083 0301 	eor.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff27 	bl	8001670 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <SUBGRF_SetRfFrequency+0x84>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	461c      	mov	r4, r3
 800182e:	4615      	mov	r5, r2
 8001830:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001834:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001838:	4a13      	ldr	r2, [pc, #76]	@ (8001888 <SUBGRF_SetRfFrequency+0x88>)
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	4640      	mov	r0, r8
 8001840:	4649      	mov	r1, r9
 8001842:	f7fe fcf5 	bl	8000230 <__aeabi_uldivmod>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4613      	mov	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	0e1b      	lsrs	r3, r3, #24
 8001852:	b2db      	uxtb	r3, r3
 8001854:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	b2db      	uxtb	r3, r3
 800185c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b2db      	uxtb	r3, r3
 8001864:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	2204      	movs	r2, #4
 8001872:	4619      	mov	r1, r3
 8001874:	2086      	movs	r0, #134	@ 0x86
 8001876:	f000 faf1 	bl	8001e5c <SUBGRF_WriteCommand>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001884:	200001fb 	.word	0x200001fb
 8001888:	01e84800 	.word	0x01e84800

0800188c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <SUBGRF_SetPacketType+0x34>)
 800189a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d104      	bne.n	80018ac <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80018a2:	2100      	movs	r1, #0
 80018a4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80018a8:	f000 fa6c 	bl	8001d84 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80018ac:	1dfb      	adds	r3, r7, #7
 80018ae:	2201      	movs	r2, #1
 80018b0:	4619      	mov	r1, r3
 80018b2:	208a      	movs	r0, #138	@ 0x8a
 80018b4:	f000 fad2 	bl	8001e5c <SUBGRF_WriteCommand>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200001f9 	.word	0x200001f9

080018c4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    return PacketType;
 80018c8:	4b02      	ldr	r3, [pc, #8]	@ (80018d4 <SUBGRF_GetPacketType+0x10>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	200001f9 	.word	0x200001f9

080018d8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	460b      	mov	r3, r1
 80018e4:	71bb      	strb	r3, [r7, #6]
 80018e6:	4613      	mov	r3, r2
 80018e8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d149      	bne.n	8001984 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fd81 	bl	80013f8 <RBI_GetRFOMaxPowerConfig>
 80018f6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80018f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	429a      	cmp	r2, r3
 8001900:	da01      	bge.n	8001906 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b0e      	cmp	r3, #14
 800190a:	d10e      	bne.n	800192a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800190c:	2301      	movs	r3, #1
 800190e:	2201      	movs	r2, #1
 8001910:	2100      	movs	r1, #0
 8001912:	2004      	movs	r0, #4
 8001914:	f7ff fef6 	bl	8001704 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001918:	79ba      	ldrb	r2, [r7, #6]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	330e      	adds	r3, #14
 8001924:	b2db      	uxtb	r3, r3
 8001926:	71bb      	strb	r3, [r7, #6]
 8001928:	e01f      	b.n	800196a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b0a      	cmp	r3, #10
 800192e:	d10e      	bne.n	800194e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001930:	2301      	movs	r3, #1
 8001932:	2201      	movs	r2, #1
 8001934:	2100      	movs	r1, #0
 8001936:	2001      	movs	r0, #1
 8001938:	f7ff fee4 	bl	8001704 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800193c:	79ba      	ldrb	r2, [r7, #6]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	330d      	adds	r3, #13
 8001948:	b2db      	uxtb	r3, r3
 800194a:	71bb      	strb	r3, [r7, #6]
 800194c:	e00d      	b.n	800196a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800194e:	2301      	movs	r3, #1
 8001950:	2201      	movs	r2, #1
 8001952:	2100      	movs	r1, #0
 8001954:	2007      	movs	r0, #7
 8001956:	f7ff fed5 	bl	8001704 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800195a:	79ba      	ldrb	r2, [r7, #6]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	330e      	adds	r3, #14
 8001966:	b2db      	uxtb	r3, r3
 8001968:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800196a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800196e:	f113 0f11 	cmn.w	r3, #17
 8001972:	da01      	bge.n	8001978 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001974:	23ef      	movs	r3, #239	@ 0xef
 8001976:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001978:	2118      	movs	r1, #24
 800197a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800197e:	f000 fa01 	bl	8001d84 <SUBGRF_WriteRegister>
 8001982:	e067      	b.n	8001a54 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001984:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001988:	f000 fa10 	bl	8001dac <SUBGRF_ReadRegister>
 800198c:	4603      	mov	r3, r0
 800198e:	f043 031e 	orr.w	r3, r3, #30
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4619      	mov	r1, r3
 8001996:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800199a:	f000 f9f3 	bl	8001d84 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fd2a 	bl	80013f8 <RBI_GetRFOMaxPowerConfig>
 80019a4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80019a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	da01      	bge.n	80019b4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b14      	cmp	r3, #20
 80019b8:	d10e      	bne.n	80019d8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80019ba:	2301      	movs	r3, #1
 80019bc:	2200      	movs	r2, #0
 80019be:	2105      	movs	r1, #5
 80019c0:	2003      	movs	r0, #3
 80019c2:	f7ff fe9f 	bl	8001704 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80019c6:	79ba      	ldrb	r2, [r7, #6]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3316      	adds	r3, #22
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	71bb      	strb	r3, [r7, #6]
 80019d6:	e031      	b.n	8001a3c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b11      	cmp	r3, #17
 80019dc:	d10e      	bne.n	80019fc <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80019de:	2301      	movs	r3, #1
 80019e0:	2200      	movs	r2, #0
 80019e2:	2103      	movs	r1, #3
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7ff fe8d 	bl	8001704 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80019ea:	79ba      	ldrb	r2, [r7, #6]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	3316      	adds	r3, #22
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	e01f      	b.n	8001a3c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b0e      	cmp	r3, #14
 8001a00:	d10e      	bne.n	8001a20 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001a02:	2301      	movs	r3, #1
 8001a04:	2200      	movs	r2, #0
 8001a06:	2102      	movs	r1, #2
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f7ff fe7b 	bl	8001704 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001a0e:	79ba      	ldrb	r2, [r7, #6]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	330e      	adds	r3, #14
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	71bb      	strb	r3, [r7, #6]
 8001a1e:	e00d      	b.n	8001a3c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001a20:	2301      	movs	r3, #1
 8001a22:	2200      	movs	r2, #0
 8001a24:	2107      	movs	r1, #7
 8001a26:	2004      	movs	r0, #4
 8001a28:	f7ff fe6c 	bl	8001704 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001a2c:	79ba      	ldrb	r2, [r7, #6]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	3316      	adds	r3, #22
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8001a3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a40:	f113 0f09 	cmn.w	r3, #9
 8001a44:	da01      	bge.n	8001a4a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001a46:	23f7      	movs	r3, #247	@ 0xf7
 8001a48:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8001a4a:	2138      	movs	r1, #56	@ 0x38
 8001a4c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001a50:	f000 f998 	bl	8001d84 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001a58:	797b      	ldrb	r3, [r7, #5]
 8001a5a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	2202      	movs	r2, #2
 8001a62:	4619      	mov	r1, r3
 8001a64:	208e      	movs	r0, #142	@ 0x8e
 8001a66:	f000 f9f9 	bl	8001e5c <SUBGRF_WriteCommand>
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001a74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001a82:	4a61      	ldr	r2, [pc, #388]	@ (8001c08 <SUBGRF_SetModulationParams+0x194>)
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	4b5d      	ldr	r3, [pc, #372]	@ (8001c0c <SUBGRF_SetModulationParams+0x198>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d004      	beq.n	8001aa6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fef3 	bl	800188c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	f200 80a5 	bhi.w	8001bfa <SUBGRF_SetModulationParams+0x186>
 8001ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab8 <SUBGRF_SetModulationParams+0x44>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001b89 	.word	0x08001b89
 8001ac0:	08001b4b 	.word	0x08001b4b
 8001ac4:	08001bb7 	.word	0x08001bb7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8001c10 <SUBGRF_SetModulationParams+0x19c>)
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7b1b      	ldrb	r3, [r3, #12]
 8001af2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b5b      	ldrb	r3, [r3, #13]
 8001af8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2200      	movs	r2, #0
 8001b00:	461c      	mov	r4, r3
 8001b02:	4615      	mov	r5, r2
 8001b04:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001b08:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001b0c:	4a41      	ldr	r2, [pc, #260]	@ (8001c14 <SUBGRF_SetModulationParams+0x1a0>)
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	4640      	mov	r0, r8
 8001b14:	4649      	mov	r1, r9
 8001b16:	f7fe fb8b 	bl	8000230 <__aeabi_uldivmod>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4613      	mov	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001b38:	7cfb      	ldrb	r3, [r7, #19]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	4619      	mov	r1, r3
 8001b42:	208b      	movs	r0, #139	@ 0x8b
 8001b44:	f000 f98a 	bl	8001e5c <SUBGRF_WriteCommand>
        break;
 8001b48:	e058      	b.n	8001bfc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4a2f      	ldr	r2, [pc, #188]	@ (8001c10 <SUBGRF_SetModulationParams+0x19c>)
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7d1b      	ldrb	r3, [r3, #20]
 8001b74:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001b76:	7cfb      	ldrb	r3, [r7, #19]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4619      	mov	r1, r3
 8001b80:	208b      	movs	r0, #139	@ 0x8b
 8001b82:	f000 f96b 	bl	8001e5c <SUBGRF_WriteCommand>
        break;
 8001b86:	e039      	b.n	8001bfc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7e1b      	ldrb	r3, [r3, #24]
 8001b90:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7e5b      	ldrb	r3, [r3, #25]
 8001b96:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7e9b      	ldrb	r3, [r3, #26]
 8001b9c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7edb      	ldrb	r3, [r3, #27]
 8001ba2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001ba4:	7cfb      	ldrb	r3, [r7, #19]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	4619      	mov	r1, r3
 8001bae:	208b      	movs	r0, #139	@ 0x8b
 8001bb0:	f000 f954 	bl	8001e5c <SUBGRF_WriteCommand>

        break;
 8001bb4:	e022      	b.n	8001bfc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <SUBGRF_SetModulationParams+0x19c>)
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
 8001be0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7b5b      	ldrb	r3, [r3, #13]
 8001be6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	208b      	movs	r0, #139	@ 0x8b
 8001bf4:	f000 f932 	bl	8001e5c <SUBGRF_WriteCommand>
        break;
 8001bf8:	e000      	b.n	8001bfc <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8001bfa:	bf00      	nop
    }
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c06:	bf00      	nop
 8001c08:	080070dc 	.word	0x080070dc
 8001c0c:	200001f9 	.word	0x200001f9
 8001c10:	3d090000 	.word	0x3d090000
 8001c14:	01e84800 	.word	0x01e84800

08001c18 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001c24:	4a48      	ldr	r2, [pc, #288]	@ (8001d48 <SUBGRF_SetPacketParams+0x130>)
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c2c:	c303      	stmia	r3!, {r0, r1}
 8001c2e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	4b45      	ldr	r3, [pc, #276]	@ (8001d4c <SUBGRF_SetPacketParams+0x134>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d004      	beq.n	8001c46 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fe23 	bl	800188c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d878      	bhi.n	8001d40 <SUBGRF_SetPacketParams+0x128>
 8001c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c54 <SUBGRF_SetPacketParams+0x3c>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001cf5 	.word	0x08001cf5
 8001c5c:	08001ce9 	.word	0x08001ce9
 8001c60:	08001c65 	.word	0x08001c65
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7a5b      	ldrb	r3, [r3, #9]
 8001c68:	2bf1      	cmp	r3, #241	@ 0xf1
 8001c6a:	d10a      	bne.n	8001c82 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001c6c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c70:	f7ff fc3b 	bl	80014ea <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001c74:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001c78:	f7ff fc57 	bl	800152a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	75bb      	strb	r3, [r7, #22]
 8001c80:	e011      	b.n	8001ca6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7a5b      	ldrb	r3, [r3, #9]
 8001c86:	2bf2      	cmp	r3, #242	@ 0xf2
 8001c88:	d10a      	bne.n	8001ca0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001c8a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001c8e:	f7ff fc2c 	bl	80014ea <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001c92:	f241 0021 	movw	r0, #4129	@ 0x1021
 8001c96:	f7ff fc48 	bl	800152a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	75bb      	strb	r3, [r7, #22]
 8001c9e:	e002      	b.n	8001ca6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7a5b      	ldrb	r3, [r3, #9]
 8001ca4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8001ca6:	2309      	movs	r3, #9
 8001ca8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	885b      	ldrh	r3, [r3, #2]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	885b      	ldrh	r3, [r3, #2]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	791b      	ldrb	r3, [r3, #4]
 8001cc2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	795b      	ldrb	r3, [r3, #5]
 8001cc8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	799b      	ldrb	r3, [r3, #6]
 8001cce:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	79db      	ldrb	r3, [r3, #7]
 8001cd4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7a1b      	ldrb	r3, [r3, #8]
 8001cda:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001cdc:	7dbb      	ldrb	r3, [r7, #22]
 8001cde:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7a9b      	ldrb	r3, [r3, #10]
 8001ce4:	753b      	strb	r3, [r7, #20]
        break;
 8001ce6:	e022      	b.n	8001d2e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7b1b      	ldrb	r3, [r3, #12]
 8001cf0:	733b      	strb	r3, [r7, #12]
        break;
 8001cf2:	e01c      	b.n	8001d2e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001cf4:	2306      	movs	r3, #6
 8001cf6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	89db      	ldrh	r3, [r3, #14]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	89db      	ldrh	r3, [r3, #14]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7c1a      	ldrb	r2, [r3, #16]
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <SUBGRF_SetPacketParams+0x138>)
 8001d12:	4611      	mov	r1, r2
 8001d14:	7019      	strb	r1, [r3, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7c5b      	ldrb	r3, [r3, #17]
 8001d1e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7c9b      	ldrb	r3, [r3, #18]
 8001d24:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7cdb      	ldrb	r3, [r3, #19]
 8001d2a:	747b      	strb	r3, [r7, #17]
        break;
 8001d2c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	4619      	mov	r1, r3
 8001d38:	208c      	movs	r0, #140	@ 0x8c
 8001d3a:	f000 f88f 	bl	8001e5c <SUBGRF_WriteCommand>
 8001d3e:	e000      	b.n	8001d42 <SUBGRF_SetPacketParams+0x12a>
        return;
 8001d40:	bf00      	nop
}
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	080070e4 	.word	0x080070e4
 8001d4c:	200001f9 	.word	0x200001f9
 8001d50:	200001fa 	.word	0x200001fa

08001d54 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001d68:	79bb      	ldrb	r3, [r7, #6]
 8001d6a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2202      	movs	r2, #2
 8001d72:	4619      	mov	r1, r3
 8001d74:	208f      	movs	r0, #143	@ 0x8f
 8001d76:	f000 f871 	bl	8001e5c <SUBGRF_WriteCommand>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	80fb      	strh	r3, [r7, #6]
 8001d90:	4613      	mov	r3, r2
 8001d92:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8001d94:	1d7a      	adds	r2, r7, #5
 8001d96:	88f9      	ldrh	r1, [r7, #6]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4803      	ldr	r0, [pc, #12]	@ (8001da8 <SUBGRF_WriteRegister+0x24>)
 8001d9c:	f003 fada 	bl	8005354 <HAL_SUBGHZ_WriteRegisters>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000154 	.word	0x20000154

08001dac <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001db6:	f107 020f 	add.w	r2, r7, #15
 8001dba:	88f9      	ldrh	r1, [r7, #6]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	4804      	ldr	r0, [pc, #16]	@ (8001dd0 <SUBGRF_ReadRegister+0x24>)
 8001dc0:	f003 fb27 	bl	8005412 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000154 	.word	0x20000154

08001dd4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	80fb      	strh	r3, [r7, #6]
 8001de0:	4613      	mov	r3, r2
 8001de2:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001de4:	f3ef 8310 	mrs	r3, PRIMASK
 8001de8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dee:	b672      	cpsid	i
}
 8001df0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001df2:	88bb      	ldrh	r3, [r7, #4]
 8001df4:	88f9      	ldrh	r1, [r7, #6]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	4806      	ldr	r0, [pc, #24]	@ (8001e14 <SUBGRF_WriteRegisters+0x40>)
 8001dfa:	f003 faab 	bl	8005354 <HAL_SUBGHZ_WriteRegisters>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f383 8810 	msr	PRIMASK, r3
}
 8001e08:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000154 	.word	0x20000154

08001e18 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e28:	f3ef 8310 	mrs	r3, PRIMASK
 8001e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001e30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e32:	b672      	cpsid	i
}
 8001e34:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8001e36:	79bb      	ldrb	r3, [r7, #6]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	79f9      	ldrb	r1, [r7, #7]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4806      	ldr	r0, [pc, #24]	@ (8001e58 <SUBGRF_WriteBuffer+0x40>)
 8001e40:	f003 fbfb 	bl	800563a <HAL_SUBGHZ_WriteBuffer>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f383 8810 	msr	PRIMASK, r3
}
 8001e4e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000154 	.word	0x20000154

08001e5c <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e76:	b672      	cpsid	i
}
 8001e78:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	79f9      	ldrb	r1, [r7, #7]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4806      	ldr	r0, [pc, #24]	@ (8001e9c <SUBGRF_WriteCommand+0x40>)
 8001e82:	f003 fb27 	bl	80054d4 <HAL_SUBGHZ_ExecSetCmd>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f383 8810 	msr	PRIMASK, r3
}
 8001e90:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000154 	.word	0x20000154

08001ea0 <SUBGRF_SetSwitch>:
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
    CRITICAL_SECTION_END();
}

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	4613      	mov	r3, r2
 8001eae:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10d      	bne.n	8001ed6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d104      	bne.n	8001eca <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8001ec4:	2004      	movs	r0, #4
 8001ec6:	f000 f8e7 	bl	8002098 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d107      	bne.n	8001ee0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e004      	b.n	8001ee0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8001ed6:	79bb      	ldrb	r3, [r7, #6]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fa65 	bl	80013b2 <RBI_ConfigRFSwitch>
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8001efe:	f7ff fa66 	bl	80013ce <RBI_GetTxConfig>
 8001f02:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d016      	beq.n	8001f38 <SUBGRF_SetRfTxPower+0x48>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	dc16      	bgt.n	8001f3e <SUBGRF_SetRfTxPower+0x4e>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <SUBGRF_SetRfTxPower+0x2e>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d00a      	beq.n	8001f32 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8001f1c:	e00f      	b.n	8001f3e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	dd02      	ble.n	8001f2c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	73fb      	strb	r3, [r7, #15]
            break;
 8001f2a:	e009      	b.n	8001f40 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
            break;
 8001f30:	e006      	b.n	8001f40 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
            break;
 8001f36:	e003      	b.n	8001f40 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	73fb      	strb	r3, [r7, #15]
            break;
 8001f3c:	e000      	b.n	8001f40 <SUBGRF_SetRfTxPower+0x50>
            break;
 8001f3e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8001f40:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2202      	movs	r2, #2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fcc5 	bl	80018d8 <SUBGRF_SetTxParams>

    return paSelect;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2001      	movs	r0, #1
 8001f66:	4798      	blx	r3
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200001fc 	.word	0x200001fc

08001f74 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2002      	movs	r0, #2
 8001f82:	4798      	blx	r3
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200001fc 	.word	0x200001fc

08001f90 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2040      	movs	r0, #64	@ 0x40
 8001f9e:	4798      	blx	r3
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200001fc 	.word	0x200001fc

08001fac <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8001fc2:	e00a      	b.n	8001fda <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2080      	movs	r0, #128	@ 0x80
 8001fca:	4798      	blx	r3
            break;
 8001fcc:	e005      	b.n	8001fda <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8001fce:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fd6:	4798      	blx	r3
            break;
 8001fd8:	bf00      	nop
    }
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200001fc 	.word	0x200001fc

08001fe8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ff8:	4798      	blx	r3
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200001fc 	.word	0x200001fc

08002008 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2020      	movs	r0, #32
 8002016:	4798      	blx	r3
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200001fc 	.word	0x200001fc

08002024 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800202c:	4b03      	ldr	r3, [pc, #12]	@ (800203c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2004      	movs	r0, #4
 8002032:	4798      	blx	r3
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200001fc 	.word	0x200001fc

08002040 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2008      	movs	r0, #8
 800204e:	4798      	blx	r3
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200001fc 	.word	0x200001fc

0800205c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2010      	movs	r0, #16
 800206a:	4798      	blx	r3
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200001fc 	.word	0x200001fc

08002078 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002088:	4798      	blx	r3
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200001fc 	.word	0x200001fc

08002098 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80020a2:	f7ff f9a2 	bl	80013ea <RBI_IsDCDC>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d112      	bne.n	80020d2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80020ac:	f640 1023 	movw	r0, #2339	@ 0x923
 80020b0:	f7ff fe7c 	bl	8001dac <SUBGRF_ReadRegister>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	f023 0306 	bic.w	r3, r3, #6
 80020be:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	4619      	mov	r1, r3
 80020ca:	f640 1023 	movw	r0, #2339	@ 0x923
 80020ce:	f7ff fe59 	bl	8001d84 <SUBGRF_WriteRegister>
  }
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e6:	2003      	movs	r0, #3
 80020e8:	f000 f95e 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020ec:	f001 fcf0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_Init+0x3c>)
 80020f4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 f810 	bl	800211c <HAL_InitTick>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	71fb      	strb	r3, [r7, #7]
 8002106:	e001      	b.n	800210c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002108:	f7fe fe5a 	bl	8000dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800210c:	79fb      	ldrb	r3, [r7, #7]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000008 	.word	0x20000008

0800211c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <HAL_InitTick+0x6c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d024      	beq.n	800217a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002130:	f001 fcce 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_InitTick+0x6c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002140:	fbb3 f3f1 	udiv	r3, r3, r1
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f960 	bl	800240e <HAL_SYSTICK_Config>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10f      	bne.n	8002174 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	d809      	bhi.n	800216e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215a:	2200      	movs	r2, #0
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002162:	f000 f92c 	bl	80023be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002166:	4a09      	ldr	r2, [pc, #36]	@ (800218c <HAL_InitTick+0x70>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e007      	b.n	800217e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e004      	b.n	800217e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e001      	b.n	800217e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000001c 	.word	0x2000001c
 800218c:	20000018 	.word	0x20000018

08002190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <HAL_IncTick+0x1c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <HAL_IncTick+0x20>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a03      	ldr	r2, [pc, #12]	@ (80021b0 <HAL_IncTick+0x20>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	2000001c 	.word	0x2000001c
 80021b0:	20000200 	.word	0x20000200

080021b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;
 80021b8:	4b02      	ldr	r3, [pc, #8]	@ (80021c4 <HAL_GetTick+0x10>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000200 	.word	0x20000200

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff fff0 	bl	80021b4 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <HAL_Delay+0x44>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffe0 	bl	80021b4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000001c 	.word	0x2000001c

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4906      	ldr	r1, [pc, #24]	@ (80022a8 <__NVIC_EnableIRQ+0x34>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	@ (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	@ (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	@ 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002388:	f7ff ff90 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff2d 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023cc:	f7ff ff44 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7ff ff92 	bl	8002300 <NVIC_EncodePriority>
 80023dc:	4602      	mov	r2, r0
 80023de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff61 	bl	80022ac <__NVIC_SetPriority>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff37 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffa4 	bl	8002364 <SysTick_Config>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d005      	beq.n	800244a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2204      	movs	r2, #4
 8002442:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e047      	b.n	80024da <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 020e 	bic.w	r2, r2, #14
 8002458:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	f003 021c 	and.w	r2, r3, #28
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002496:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00c      	beq.n	80024ba <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
    }
  }
  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f2:	e140      	b.n	8002776 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8132 	beq.w	8002770 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d005      	beq.n	8002524 <HAL_GPIO_Init+0x40>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d130      	bne.n	8002586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800255a:	2201      	movs	r2, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 0201 	and.w	r2, r3, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b03      	cmp	r3, #3
 8002590:	d017      	beq.n	80025c2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d123      	bne.n	8002616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	6939      	ldr	r1, [r7, #16]
 8002612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0203 	and.w	r2, r3, #3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 808c 	beq.w	8002770 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002658:	4a4e      	ldr	r2, [pc, #312]	@ (8002794 <HAL_GPIO_Init+0x2b0>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	2207      	movs	r2, #7
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_Init+0x1bc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a44      	ldr	r2, [pc, #272]	@ (8002798 <HAL_GPIO_Init+0x2b4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x1b8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a43      	ldr	r2, [pc, #268]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_Init+0x1b4>
 8002694:	2302      	movs	r3, #2
 8002696:	e004      	b.n	80026a2 <HAL_GPIO_Init+0x1be>
 8002698:	2307      	movs	r3, #7
 800269a:	e002      	b.n	80026a2 <HAL_GPIO_Init+0x1be>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_GPIO_Init+0x1be>
 80026a0:	2300      	movs	r3, #0
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	f002 0203 	and.w	r2, r2, #3
 80026a8:	0092      	lsls	r2, r2, #2
 80026aa:	4093      	lsls	r3, r2
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b2:	4938      	ldr	r1, [pc, #224]	@ (8002794 <HAL_GPIO_Init+0x2b0>)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c0:	4b37      	ldr	r3, [pc, #220]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e4:	4a2e      	ldr	r2, [pc, #184]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026ea:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800270e:	4a24      	ldr	r2, [pc, #144]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002714:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 8002716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800271a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800273a:	4a19      	ldr	r2, [pc, #100]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002742:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 8002744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002748:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002768:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	f47f aeb7 	bne.w	80024f4 <HAL_GPIO_Init+0x10>
  }
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010000 	.word	0x40010000
 8002798:	48000400 	.word	0x48000400
 800279c:	48000800 	.word	0x48000800
 80027a0:	58000800 	.word	0x58000800

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	041a      	lsls	r2, r3, #16
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	400b      	ands	r3, r1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e08d      	b.n	8002932 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd ff2c 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	@ 0x24
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002854:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002864:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	e006      	b.n	800288c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800288a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d108      	bne.n	80028a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	e007      	b.n	80028b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69d9      	ldr	r1, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1a      	ldr	r2, [r3, #32]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b20      	cmp	r3, #32
 800294e:	d138      	bne.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800295a:	2302      	movs	r3, #2
 800295c:	e032      	b.n	80029c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2224      	movs	r2, #36	@ 0x24
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800298c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d139      	bne.n	8002a58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e033      	b.n	8002a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2224      	movs	r2, #36	@ 0x24
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a03      	ldr	r2, [pc, #12]	@ (8002a7c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	58000400 	.word	0x58000400

08002a80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_PWREx_GetVoltageRange+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	58000400 	.word	0x58000400

08002a98 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002a9c:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa8:	d101      	bne.n	8002aae <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	58000400 	.word	0x58000400

08002abc <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b06:	d101      	bne.n	8002b0c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b60:	d101      	bne.n	8002b66 <LL_RCC_HSE_IsReady+0x18>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_RCC_HSE_IsReady+0x1a>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bba:	d101      	bne.n	8002bc0 <LL_RCC_HSI_IsReady+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_RCC_HSI_IsReady+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d101      	bne.n	8002c0a <LL_RCC_LSE_IsReady+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_RCC_LSE_IsReady+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d101      	bne.n	8002c6c <LL_RCC_LSI_IsReady+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_RCC_LSI_IsReady+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6013      	str	r3, [r2, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6013      	str	r3, [r2, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d101      	bne.n	8002cc4 <LL_RCC_MSI_IsReady+0x16>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <LL_RCC_MSI_IsReady+0x18>
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d101      	bne.n	8002ce4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002db6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ddc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002de0:	f023 020f 	bic.w	r2, r3, #15
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eee:	d101      	bne.n	8002ef4 <LL_RCC_PLL_IsReady+0x18>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <LL_RCC_PLL_IsReady+0x1a>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6a:	d101      	bne.n	8002f70 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f8e:	d101      	bne.n	8002f94 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb2:	d101      	bne.n	8002fb8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fd4:	d101      	bne.n	8002fda <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ff2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ff6:	d101      	bne.n	8002ffc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
	...

08003008 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e36f      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301a:	f7ff fea6 	bl	8002d6a <LL_RCC_GetSysClkSource>
 800301e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003020:	f7ff ff8f 	bl	8002f42 <LL_RCC_PLL_GetMainSource>
 8003024:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80c4 	beq.w	80031bc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_RCC_OscConfig+0x3e>
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d176      	bne.n	800312e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d173      	bne.n	800312e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e353      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x68>
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800306e:	e006      	b.n	800307e <HAL_RCC_OscConfig+0x76>
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800307e:	4293      	cmp	r3, r2
 8003080:	d222      	bcs.n	80030c8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd5a 	bl	8003b40 <RCC_SetFlashLatencyFromMSIRange>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e331      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fe2b 	bl	8002d1c <LL_RCC_MSI_SetCalibTrimming>
 80030c6:	e021      	b.n	800310c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fe12 	bl	8002d1c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fd1f 	bl	8003b40 <RCC_SetFlashLatencyFromMSIRange>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e2f6      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800310c:	f000 fce0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003110:	4603      	mov	r3, r0
 8003112:	4aa7      	ldr	r2, [pc, #668]	@ (80033b0 <HAL_RCC_OscConfig+0x3a8>)
 8003114:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003116:	4ba7      	ldr	r3, [pc, #668]	@ (80033b4 <HAL_RCC_OscConfig+0x3ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fffe 	bl	800211c <HAL_InitTick>
 8003120:	4603      	mov	r3, r0
 8003122:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d047      	beq.n	80031ba <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	e2e5      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02c      	beq.n	8003190 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003136:	f7ff fd9e 	bl	8002c76 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313a:	f7ff f83b 	bl	80021b4 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003142:	f7ff f837 	bl	80021b4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e2d2      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003154:	f7ff fdab 	bl	8002cae <LL_RCC_MSI_IsReady>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f1      	beq.n	8003142 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003168:	f043 0308 	orr.w	r3, r3, #8
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fdc7 	bl	8002d1c <LL_RCC_MSI_SetCalibTrimming>
 800318e:	e015      	b.n	80031bc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003190:	f7ff fd7f 	bl	8002c92 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003194:	f7ff f80e 	bl	80021b4 <HAL_GetTick>
 8003198:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319c:	f7ff f80a 	bl	80021b4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e2a5      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031ae:	f7ff fd7e 	bl	8002cae <LL_RCC_MSI_IsReady>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f1      	bne.n	800319c <HAL_RCC_OscConfig+0x194>
 80031b8:	e000      	b.n	80031bc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031ba:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d058      	beq.n	800327a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x1d2>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	d108      	bne.n	80031e6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d14b      	bne.n	800327a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e289      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003204:	d102      	bne.n	800320c <HAL_RCC_OscConfig+0x204>
 8003206:	f7ff fc86 	bl	8002b16 <LL_RCC_HSE_Enable>
 800320a:	e00d      	b.n	8003228 <HAL_RCC_OscConfig+0x220>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003214:	d104      	bne.n	8003220 <HAL_RCC_OscConfig+0x218>
 8003216:	f7ff fc51 	bl	8002abc <LL_RCC_HSE_EnableTcxo>
 800321a:	f7ff fc7c 	bl	8002b16 <LL_RCC_HSE_Enable>
 800321e:	e003      	b.n	8003228 <HAL_RCC_OscConfig+0x220>
 8003220:	f7ff fc87 	bl	8002b32 <LL_RCC_HSE_Disable>
 8003224:	f7ff fc58 	bl	8002ad8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe ffc0 	bl	80021b4 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe ffbc 	bl	80021b4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e257      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800324a:	f7ff fc80 	bl	8002b4e <LL_RCC_HSE_IsReady>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f1      	beq.n	8003238 <HAL_RCC_OscConfig+0x230>
 8003254:	e011      	b.n	800327a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe ffad 	bl	80021b4 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325e:	f7fe ffa9 	bl	80021b4 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b64      	cmp	r3, #100	@ 0x64
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e244      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003270:	f7ff fc6d 	bl	8002b4e <LL_RCC_HSE_IsReady>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f1      	bne.n	800325e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d046      	beq.n	8003314 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d005      	beq.n	8003298 <HAL_RCC_OscConfig+0x290>
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d10e      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d10b      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e22a      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fc8e 	bl	8002bca <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032ae:	e031      	b.n	8003314 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d019      	beq.n	80032ec <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b8:	f7ff fc5a 	bl	8002b70 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe ff7a 	bl	80021b4 <HAL_GetTick>
 80032c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fe ff76 	bl	80021b4 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e211      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032d6:	f7ff fc67 	bl	8002ba8 <LL_RCC_HSI_IsReady>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f1      	beq.n	80032c4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fc70 	bl	8002bca <LL_RCC_HSI_SetCalibTrimming>
 80032ea:	e013      	b.n	8003314 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ec:	f7ff fc4e 	bl	8002b8c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe ff60 	bl	80021b4 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fe ff5c 	bl	80021b4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1f7      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800330a:	f7ff fc4d 	bl	8002ba8 <LL_RCC_HSI_IsReady>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f1      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d06e      	beq.n	80033fe <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d056      	beq.n	80033d6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003330:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	429a      	cmp	r2, r3
 800333e:	d031      	beq.n	80033a4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e1d0      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d013      	beq.n	800338a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003362:	f7ff fc67 	bl	8002c34 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003366:	f7fe ff25 	bl	80021b4 <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336e:	f7fe ff21 	bl	80021b4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b11      	cmp	r3, #17
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1bc      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003380:	f7ff fc68 	bl	8002c54 <LL_RCC_LSI_IsReady>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f1      	bne.n	800336e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003392:	f023 0210 	bic.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a4:	f7ff fc36 	bl	8002c14 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fe ff04 	bl	80021b4 <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80033ae:	e00c      	b.n	80033ca <HAL_RCC_OscConfig+0x3c2>
 80033b0:	20000008 	.word	0x20000008
 80033b4:	20000018 	.word	0x20000018
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe fefc 	bl	80021b4 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b11      	cmp	r3, #17
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e197      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80033ca:	f7ff fc43 	bl	8002c54 <LL_RCC_LSI_IsReady>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f1      	beq.n	80033b8 <HAL_RCC_OscConfig+0x3b0>
 80033d4:	e013      	b.n	80033fe <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d6:	f7ff fc2d 	bl	8002c34 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fe feeb 	bl	80021b4 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fe fee7 	bl	80021b4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b11      	cmp	r3, #17
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e182      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80033f4:	f7ff fc2e 	bl	8002c54 <LL_RCC_LSI_IsReady>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f1      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80d8 	beq.w	80035bc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800340c:	f7ff fb44 	bl	8002a98 <LL_PWR_IsEnabledBkUpAccess>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d113      	bne.n	800343e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003416:	f7ff fb25 	bl	8002a64 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341a:	f7fe fecb 	bl	80021b4 <HAL_GetTick>
 800341e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003422:	f7fe fec7 	bl	80021b4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e162      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003434:	f7ff fb30 	bl	8002a98 <LL_PWR_IsEnabledBkUpAccess>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f1      	beq.n	8003422 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d07b      	beq.n	800353e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b85      	cmp	r3, #133	@ 0x85
 800344c:	d003      	beq.n	8003456 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b05      	cmp	r3, #5
 8003454:	d109      	bne.n	800346a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346a:	f7fe fea3 	bl	80021b4 <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fe95 	bl	80021b4 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e12e      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800349c:	f7ff fba9 	bl	8002bf2 <LL_RCC_LSE_IsReady>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0ef      	beq.n	8003486 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b81      	cmp	r3, #129	@ 0x81
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b85      	cmp	r3, #133	@ 0x85
 80034b4:	d121      	bne.n	80034fa <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fe7d 	bl	80021b4 <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fe fe6f 	bl	80021b4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e108      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ec      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034f8:	e060      	b.n	80035bc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe fe5b 	bl	80021b4 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800350c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003514:	e00a      	b.n	800352c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe fe4d 	bl	80021b4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e0e6      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800352c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ec      	bne.n	8003516 <HAL_RCC_OscConfig+0x50e>
 800353c:	e03e      	b.n	80035bc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe fe39 	bl	80021b4 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003550:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe fe2b 	bl	80021b4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0c4      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ec      	bne.n	800355a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7fe fe18 	bl	80021b4 <HAL_GetTick>
 8003584:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fe fe0a 	bl	80021b4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e0a3      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80035b2:	f7ff fb1e 	bl	8002bf2 <LL_RCC_LSE_IsReady>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ef      	bne.n	800359c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8099 	beq.w	80036f8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d06c      	beq.n	80036a6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d14b      	bne.n	800366c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	f7ff fc74 	bl	8002ec0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fdec 	bl	80021b4 <HAL_GetTick>
 80035dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe fde8 	bl	80021b4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b0a      	cmp	r3, #10
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e083      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80035f2:	f7ff fc73 	bl	8002edc <LL_RCC_PLL_IsReady>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f1      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	4b40      	ldr	r3, [pc, #256]	@ (8003704 <HAL_RCC_OscConfig+0x6fc>)
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003614:	0212      	lsls	r2, r2, #8
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003628:	430a      	orrs	r2, r1
 800362a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003632:	f7ff fc37 	bl	8002ea4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003644:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fe fdb5 	bl	80021b4 <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364e:	f7fe fdb1 	bl	80021b4 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b0a      	cmp	r3, #10
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e04c      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003660:	f7ff fc3c 	bl	8002edc <LL_RCC_PLL_IsReady>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f1      	beq.n	800364e <HAL_RCC_OscConfig+0x646>
 800366a:	e045      	b.n	80036f8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	f7ff fc28 	bl	8002ec0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fda0 	bl	80021b4 <HAL_GetTick>
 8003674:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fd9c 	bl	80021b4 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b0a      	cmp	r3, #10
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e037      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800368a:	f7ff fc27 	bl	8002edc <LL_RCC_PLL_IsReady>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f1      	bne.n	8003678 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800369e:	4b1a      	ldr	r3, [pc, #104]	@ (8003708 <HAL_RCC_OscConfig+0x700>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	60cb      	str	r3, [r1, #12]
 80036a4:	e028      	b.n	80036f8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e023      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0203 	and.w	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d115      	bne.n	80036f4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d10e      	bne.n	80036f4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d106      	bne.n	80036f4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	11c1808c 	.word	0x11c1808c
 8003708:	eefefffc 	.word	0xeefefffc

0800370c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e12c      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003720:	4b98      	ldr	r3, [pc, #608]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d91b      	bls.n	8003766 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b95      	ldr	r3, [pc, #596]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 0207 	bic.w	r2, r3, #7
 8003736:	4993      	ldr	r1, [pc, #588]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800373e:	f7fe fd39 	bl	80021b4 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003744:	e008      	b.n	8003758 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003746:	f7fe fd35 	bl	80021b4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e110      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003758:	4b8a      	ldr	r3, [pc, #552]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d1ef      	bne.n	8003746 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fb02 	bl	8002d80 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800377c:	f7fe fd1a 	bl	80021b4 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003784:	f7fe fd16 	bl	80021b4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0f1      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003796:	f7ff fbdf 	bl	8002f58 <LL_RCC_IsActiveFlag_HPRE>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f1      	beq.n	8003784 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff faf8 	bl	8002da6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037b6:	f7fe fcfd 	bl	80021b4 <HAL_GetTick>
 80037ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037be:	f7fe fcf9 	bl	80021b4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0d4      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037d0:	f7ff fbd3 	bl	8002f7a <LL_RCC_IsActiveFlag_C2HPRE>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f1      	beq.n	80037be <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff faf0 	bl	8002dd0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037f0:	f7fe fce0 	bl	80021b4 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037f8:	f7fe fcdc 	bl	80021b4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0b7      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800380a:	f7ff fbc8 	bl	8002f9e <LL_RCC_IsActiveFlag_SHDHPRE>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f1      	beq.n	80037f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fae9 	bl	8002dfc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800382a:	f7fe fcc3 	bl	80021b4 <HAL_GetTick>
 800382e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003832:	f7fe fcbf 	bl	80021b4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e09a      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003844:	f7ff fbbd 	bl	8002fc2 <LL_RCC_IsActiveFlag_PPRE1>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f1      	beq.n	8003832 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fade 	bl	8002e22 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003866:	f7fe fca5 	bl	80021b4 <HAL_GetTick>
 800386a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800386e:	f7fe fca1 	bl	80021b4 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e07c      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003880:	f7ff fbb0 	bl	8002fe4 <LL_RCC_IsActiveFlag_PPRE2>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f1      	beq.n	800386e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d043      	beq.n	800391e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d106      	bne.n	80038ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800389e:	f7ff f956 	bl	8002b4e <LL_RCC_HSE_IsReady>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d11e      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e066      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038b4:	f7ff fb12 	bl	8002edc <LL_RCC_PLL_IsReady>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d113      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e05b      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038ca:	f7ff f9f0 	bl	8002cae <LL_RCC_MSI_IsReady>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d108      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e050      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80038d8:	f7ff f966 	bl	8002ba8 <LL_RCC_HSI_IsReady>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e049      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fa2a 	bl	8002d44 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f0:	f7fe fc60 	bl	80021b4 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fe fc5c 	bl	80021b4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e035      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	f7ff fa2c 	bl	8002d6a <LL_RCC_GetSysClkSource>
 8003912:	4602      	mov	r2, r0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	429a      	cmp	r2, r3
 800391c:	d1ec      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800391e:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d21b      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392c:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 0207 	bic.w	r2, r3, #7
 8003934:	4913      	ldr	r1, [pc, #76]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800393c:	f7fe fc3a 	bl	80021b4 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	e008      	b.n	8003956 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003944:	f7fe fc36 	bl	80021b4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e011      	b.n	800397a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d1ef      	bne.n	8003944 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003964:	f000 f8b4 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003968:	4603      	mov	r3, r0
 800396a:	4a07      	ldr	r2, [pc, #28]	@ (8003988 <HAL_RCC_ClockConfig+0x27c>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800396e:	4b07      	ldr	r3, [pc, #28]	@ (800398c <HAL_RCC_ClockConfig+0x280>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fbd2 	bl	800211c <HAL_InitTick>
 8003978:	4603      	mov	r3, r0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	58004000 	.word	0x58004000
 8003988:	20000008 	.word	0x20000008
 800398c:	20000018 	.word	0x20000018

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399e:	f7ff f9e4 	bl	8002d6a <LL_RCC_GetSysClkSource>
 80039a2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a4:	f7ff facd 	bl	8002f42 <LL_RCC_PLL_GetMainSource>
 80039a8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d139      	bne.n	8003a2a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d136      	bne.n	8003a2a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80039bc:	f7ff f987 	bl	8002cce <LL_RCC_MSI_IsEnabledRangeSelect>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d115      	bne.n	80039f2 <HAL_RCC_GetSysClockFreq+0x62>
 80039c6:	f7ff f982 	bl	8002cce <LL_RCC_MSI_IsEnabledRangeSelect>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <HAL_RCC_GetSysClockFreq+0x4e>
 80039d0:	f7ff f98d 	bl	8002cee <LL_RCC_MSI_GetRange>
 80039d4:	4603      	mov	r3, r0
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	e005      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x5a>
 80039de:	f7ff f991 	bl	8002d04 <LL_RCC_MSI_GetRangeAfterStandby>
 80039e2:	4603      	mov	r3, r0
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a36      	ldr	r2, [pc, #216]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x134>)
 80039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f0:	e014      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x8c>
 80039f2:	f7ff f96c 	bl	8002cce <LL_RCC_MSI_IsEnabledRangeSelect>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_GetSysClockFreq+0x7a>
 80039fc:	f7ff f977 	bl	8002cee <LL_RCC_MSI_GetRange>
 8003a00:	4603      	mov	r3, r0
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	e005      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x86>
 8003a0a:	f7ff f97b 	bl	8002d04 <LL_RCC_MSI_GetRangeAfterStandby>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d115      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a28:	e012      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d102      	bne.n	8003a36 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a30:	4b25      	ldr	r3, [pc, #148]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e00c      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a3c:	f7ff f85a 	bl	8002af4 <LL_RCC_HSE_IsEnabledDiv2>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d102      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a46:	4b20      	ldr	r3, [pc, #128]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e001      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a4e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a50:	f7ff f98b 	bl	8002d6a <LL_RCC_GetSysClkSource>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d12f      	bne.n	8003aba <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a5a:	f7ff fa72 	bl	8002f42 <LL_RCC_PLL_GetMainSource>
 8003a5e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0xde>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a6c:	e00d      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a6e:	4b16      	ldr	r3, [pc, #88]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a70:	60fb      	str	r3, [r7, #12]
        break;
 8003a72:	e00d      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a74:	f7ff f83e 	bl	8002af4 <LL_RCC_HSE_IsEnabledDiv2>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a80:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a82:	e005      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003a84:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a86:	60fb      	str	r3, [r7, #12]
        break;
 8003a88:	e002      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	60fb      	str	r3, [r7, #12]
        break;
 8003a8e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003a90:	f7ff fa35 	bl	8002efe <LL_RCC_PLL_GetN>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	fb03 f402 	mul.w	r4, r3, r2
 8003a9c:	f7ff fa46 	bl	8002f2c <LL_RCC_PLL_GetDivider>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	fbb4 f4f3 	udiv	r4, r4, r3
 8003aaa:	f7ff fa34 	bl	8002f16 <LL_RCC_PLL_GetR>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	0f5b      	lsrs	r3, r3, #29
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ab8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003aba:	697b      	ldr	r3, [r7, #20]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}
 8003ac4:	0800716c 	.word	0x0800716c
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	01e84800 	.word	0x01e84800

08003ad0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b598      	push	{r3, r4, r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ad4:	f7ff ff5c 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003ad8:	4604      	mov	r4, r0
 8003ada:	f7ff f9b5 	bl	8002e48 <LL_RCC_GetAHBPrescaler>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	4a03      	ldr	r2, [pc, #12]	@ (8003af4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd98      	pop	{r3, r4, r7, pc}
 8003af4:	0800710c 	.word	0x0800710c

08003af8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b598      	push	{r3, r4, r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003afc:	f7ff ffe8 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b00:	4604      	mov	r4, r0
 8003b02:	f7ff f9b9 	bl	8002e78 <LL_RCC_GetAPB1Prescaler>
 8003b06:	4603      	mov	r3, r0
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	4a03      	ldr	r2, [pc, #12]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd98      	pop	{r3, r4, r7, pc}
 8003b18:	0800714c 	.word	0x0800714c

08003b1c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b598      	push	{r3, r4, r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b20:	f7ff ffd6 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b24:	4604      	mov	r4, r0
 8003b26:	f7ff f9b2 	bl	8002e8e <LL_RCC_GetAPB2Prescaler>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	0adb      	lsrs	r3, r3, #11
 8003b2e:	4a03      	ldr	r2, [pc, #12]	@ (8003b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd98      	pop	{r3, r4, r7, pc}
 8003b3c:	0800714c 	.word	0x0800714c

08003b40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	4a10      	ldr	r2, [pc, #64]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b56:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b58:	f7ff f981 	bl	8002e5e <LL_RCC_GetAHB3Prescaler>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	4a0c      	ldr	r2, [pc, #48]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	0c9c      	lsrs	r4, r3, #18
 8003b7c:	f7fe ff80 	bl	8002a80 <HAL_PWREx_GetVoltageRange>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4619      	mov	r1, r3
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 f80b 	bl	8003ba0 <RCC_SetFlashLatency>
 8003b8a:	4603      	mov	r3, r0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd90      	pop	{r4, r7, pc}
 8003b94:	0800716c 	.word	0x0800716c
 8003b98:	0800710c 	.word	0x0800710c
 8003b9c:	431bde83 	.word	0x431bde83

08003ba0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08e      	sub	sp, #56	@ 0x38
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003baa:	4a3a      	ldr	r2, [pc, #232]	@ (8003c94 <RCC_SetFlashLatency+0xf4>)
 8003bac:	f107 0320 	add.w	r3, r7, #32
 8003bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bb4:	6018      	str	r0, [r3, #0]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003bba:	4a37      	ldr	r2, [pc, #220]	@ (8003c98 <RCC_SetFlashLatency+0xf8>)
 8003bbc:	f107 0318 	add.w	r3, r7, #24
 8003bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc4:	6018      	str	r0, [r3, #0]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003bca:	4a34      	ldr	r2, [pc, #208]	@ (8003c9c <RCC_SetFlashLatency+0xfc>)
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be0:	d11b      	bne.n	8003c1a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003be6:	e014      	b.n	8003c12 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	3338      	adds	r3, #56	@ 0x38
 8003bee:	443b      	add	r3, r7
 8003bf0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d807      	bhi.n	8003c0c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3338      	adds	r3, #56	@ 0x38
 8003c02:	443b      	add	r3, r7
 8003c04:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c0a:	e021      	b.n	8003c50 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	3301      	adds	r3, #1
 8003c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d9e7      	bls.n	8003be8 <RCC_SetFlashLatency+0x48>
 8003c18:	e01a      	b.n	8003c50 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c1e:	e014      	b.n	8003c4a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	3338      	adds	r3, #56	@ 0x38
 8003c26:	443b      	add	r3, r7
 8003c28:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d807      	bhi.n	8003c44 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	3338      	adds	r3, #56	@ 0x38
 8003c3a:	443b      	add	r3, r7
 8003c3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c42:	e005      	b.n	8003c50 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c46:	3301      	adds	r3, #1
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d9e7      	bls.n	8003c20 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c50:	4b13      	ldr	r3, [pc, #76]	@ (8003ca0 <RCC_SetFlashLatency+0x100>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 0207 	bic.w	r2, r3, #7
 8003c58:	4911      	ldr	r1, [pc, #68]	@ (8003ca0 <RCC_SetFlashLatency+0x100>)
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c60:	f7fe faa8 	bl	80021b4 <HAL_GetTick>
 8003c64:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c66:	e008      	b.n	8003c7a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c68:	f7fe faa4 	bl	80021b4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e007      	b.n	8003c8a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <RCC_SetFlashLatency+0x100>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1ef      	bne.n	8003c68 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3738      	adds	r7, #56	@ 0x38
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	080070f0 	.word	0x080070f0
 8003c98:	080070f8 	.word	0x080070f8
 8003c9c:	08007100 	.word	0x08007100
 8003ca0:	58004000 	.word	0x58004000

08003ca4 <LL_RCC_LSE_IsReady>:
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d101      	bne.n	8003cbc <LL_RCC_LSE_IsReady+0x18>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <LL_RCC_LSE_IsReady+0x1a>
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <LL_RCC_SetUSARTClockSource>:
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	401a      	ands	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_SetI2SClockSource>:
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <LL_RCC_SetLPUARTClockSource>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <LL_RCC_SetI2CClockSource>:
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d56:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d62:	43db      	mvns	r3, r3
 8003d64:	401a      	ands	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <LL_RCC_SetLPTIMClockSource>:
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	041b      	lsls	r3, r3, #16
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <LL_RCC_SetRNGClockSource>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003dc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr

08003dde <LL_RCC_SetADCClockSource>:
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <LL_RCC_SetRTCClockSource>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <LL_RCC_GetRTCClockSource>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_ForceBackupDomainReset>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003e98:	2300      	movs	r3, #0
 8003e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d058      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003eac:	f7fe fdda 	bl	8002a64 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eb0:	f7fe f980 	bl	80021b4 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003eb6:	e009      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb8:	f7fe f97c 	bl	80021b4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d902      	bls.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	74fb      	strb	r3, [r7, #19]
        break;
 8003eca:	e006      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed8:	d1ee      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d13c      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ee0:	f7ff ffa7 	bl	8003e32 <LL_RCC_GetRTCClockSource>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d00f      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003efc:	f7ff ffa5 	bl	8003e4a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f00:	f7ff ffb3 	bl	8003e6a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d014      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fe f94c 	bl	80021b4 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f20:	f7fe f948 	bl	80021b4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d902      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	74fb      	strb	r3, [r7, #19]
            break;
 8003f36:	e004      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f38:	f7ff feb4 	bl	8003ca4 <LL_RCC_LSE_IsReady>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d1ee      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff5b 	bl	8003e08 <LL_RCC_SetRTCClockSource>
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	74bb      	strb	r3, [r7, #18]
 8003f58:	e001      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fea9 	bl	8003cc6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fe9e 	bl	8003cc6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fec0 	bl	8003d20 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fee6 	bl	8003d82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fedb 	bl	8003d82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fed0 	bl	8003d82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fea9 	bl	8003d4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fe9e 	bl	8003d4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fe93 	bl	8003d4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d011      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fe5e 	bl	8003cf6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004042:	d107      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800404e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004052:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fea5 	bl	8003db4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800407c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004080:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d011      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fea3 	bl	8003dde <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a0:	d107      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80040b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	58000400 	.word	0x58000400

080040c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0c6      	b.n	8004260 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d108      	bne.n	80040ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040e2:	d009      	beq.n	80040f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	61da      	str	r2, [r3, #28]
 80040ea:	e005      	b.n	80040f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fc fe09 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004128:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004132:	d902      	bls.n	800413a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e002      	b.n	8004140 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800413a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800413e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004148:	d007      	beq.n	800415a <HAL_SPI_Init+0x9a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004152:	d002      	beq.n	800415a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	ea42 0103 	orr.w	r1, r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b8:	d11b      	bne.n	80041f2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041ca:	d903      	bls.n	80041d4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80041d2:	e002      	b.n	80041da <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d107      	bne.n	80041f2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	0c1b      	lsrs	r3, r3, #16
 80041f8:	f003 0204 	and.w	r2, r3, #4
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004218:	ea42 0103 	orr.w	r1, r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004232:	d105      	bne.n	8004240 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	b292      	uxth	r2, r2
 800423e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800424e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d002      	beq.n	800428c <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	75fb      	strb	r3, [r7, #23]
    goto error;
 800428a:	e0ba      	b.n	8004402 <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d110      	bne.n	80042b6 <HAL_SPI_Receive_IT+0x4e>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800429c:	d10b      	bne.n	80042b6 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2204      	movs	r2, #4
 80042a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f8b1 	bl	8004414 <HAL_SPI_TransmitReceive_IT>
 80042b2:	4603      	mov	r3, r0
 80042b4:	e0a6      	b.n	8004404 <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_SPI_Receive_IT+0x5a>
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042c6:	e09c      	b.n	8004402 <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_SPI_Receive_IT+0x6e>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e096      	b.n	8004404 <HAL_SPI_Receive_IT+0x19c>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2204      	movs	r2, #4
 80042e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004322:	d90b      	bls.n	800433c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004332:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a35      	ldr	r2, [pc, #212]	@ (800440c <HAL_SPI_Receive_IT+0x1a4>)
 8004338:	64da      	str	r2, [r3, #76]	@ 0x4c
 800433a:	e00a      	b.n	8004352 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800434a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a30      	ldr	r2, [pc, #192]	@ (8004410 <HAL_SPI_Receive_IT+0x1a8>)
 8004350:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800435a:	d10f      	bne.n	800437c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800436a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800437a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004384:	d11f      	bne.n	80043c6 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004394:	d806      	bhi.n	80043a4 <HAL_SPI_Receive_IT+0x13c>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	2b02      	cmp	r3, #2
 800439c:	d102      	bne.n	80043a4 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2202      	movs	r2, #2
 80043a2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e002      	b.n	80043cc <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d6:	2b40      	cmp	r3, #64	@ 0x40
 80043d8:	d007      	beq.n	80043ea <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004400:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	08004c15 	.word	0x08004c15
 8004410:	08004b55 	.word	0x08004b55

08004414 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800442c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004434:	7dbb      	ldrb	r3, [r7, #22]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d00d      	beq.n	8004456 <HAL_SPI_TransmitReceive_IT+0x42>
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004440:	d106      	bne.n	8004450 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <HAL_SPI_TransmitReceive_IT+0x3c>
 800444a:	7dbb      	ldrb	r3, [r7, #22]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d002      	beq.n	8004456 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004450:	2302      	movs	r3, #2
 8004452:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004454:	e0a5      	b.n	80045a2 <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_SPI_TransmitReceive_IT+0x54>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_SPI_TransmitReceive_IT+0x54>
 8004462:	887b      	ldrh	r3, [r7, #2]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800446c:	e099      	b.n	80045a2 <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_SPI_TransmitReceive_IT+0x68>
 8004478:	2302      	movs	r3, #2
 800447a:	e093      	b.n	80045a4 <HAL_SPI_TransmitReceive_IT+0x190>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b04      	cmp	r3, #4
 800448e:	d003      	beq.n	8004498 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2205      	movs	r2, #5
 8004494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	887a      	ldrh	r2, [r7, #2]
 80044ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	887a      	ldrh	r2, [r7, #2]
 80044ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	887a      	ldrh	r2, [r7, #2]
 80044c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044ce:	d906      	bls.n	80044de <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a37      	ldr	r2, [pc, #220]	@ (80045b0 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80044d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a36      	ldr	r2, [pc, #216]	@ (80045b4 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80044da:	651a      	str	r2, [r3, #80]	@ 0x50
 80044dc:	e005      	b.n	80044ea <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a35      	ldr	r2, [pc, #212]	@ (80045b8 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 80044e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a35      	ldr	r2, [pc, #212]	@ (80045bc <HAL_SPI_TransmitReceive_IT+0x1a8>)
 80044e8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f2:	d11f      	bne.n	8004534 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004502:	d806      	bhi.n	8004512 <HAL_SPI_TransmitReceive_IT+0xfe>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	2b02      	cmp	r3, #2
 800450a:	d102      	bne.n	8004512 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2202      	movs	r2, #2
 8004510:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e002      	b.n	800453a <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004542:	d802      	bhi.n	800454a <HAL_SPI_TransmitReceive_IT+0x136>
 8004544:	887b      	ldrh	r3, [r7, #2]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d908      	bls.n	800455c <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	e007      	b.n	800456c <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800456a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004576:	2b40      	cmp	r3, #64	@ 0x40
 8004578:	d007      	beq.n	800458a <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004588:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80045a0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	080049dd 	.word	0x080049dd
 80045b4:	08004a8d 	.word	0x08004a8d
 80045b8:	080047e5 	.word	0x080047e5
 80045bc:	08004921 	.word	0x08004921

080045c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10e      	bne.n	8004600 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d004      	beq.n	8004600 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
    return;
 80045fe:	e0ce      	b.n	800479e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_SPI_IRQHandler+0x5e>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
    return;
 800461c:	e0bf      	b.n	800479e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <HAL_SPI_IRQHandler+0x7e>
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80b0 	beq.w	800479e <HAL_SPI_IRQHandler+0x1de>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80aa 	beq.w	800479e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d023      	beq.n	800469c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b03      	cmp	r3, #3
 800465e:	d011      	beq.n	8004684 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004664:	f043 0204 	orr.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	e00b      	b.n	800469c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	693b      	ldr	r3, [r7, #16]
        return;
 800469a:	e080      	b.n	800479e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d014      	beq.n	80046d0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046aa:	f043 0201 	orr.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046de:	f043 0208 	orr.w	r2, r3, #8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d04f      	beq.n	800479c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800470a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <HAL_SPI_IRQHandler+0x168>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d034      	beq.n	8004792 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0203 	bic.w	r2, r2, #3
 8004736:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473c:	2b00      	cmp	r3, #0
 800473e:	d011      	beq.n	8004764 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004744:	4a17      	ldr	r2, [pc, #92]	@ (80047a4 <HAL_SPI_IRQHandler+0x1e4>)
 8004746:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd fe6a 	bl	8002426 <HAL_DMA_Abort_IT>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800475c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004768:	2b00      	cmp	r3, #0
 800476a:	d016      	beq.n	800479a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004770:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <HAL_SPI_IRQHandler+0x1e4>)
 8004772:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	4618      	mov	r0, r3
 800477a:	f7fd fe54 	bl	8002426 <HAL_DMA_Abort_IT>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004788:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004790:	e003      	b.n	800479a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc fa2c 	bl	8000bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004798:	e000      	b.n	800479c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800479a:	bf00      	nop
    return;
 800479c:	bf00      	nop
  }
}
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	080047bb 	.word	0x080047bb

080047a8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7fc fa0a 	bl	8000bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d923      	bls.n	8004840 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	b292      	uxth	r2, r2
 8004804:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	1c9a      	adds	r2, r3, #2
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b02      	subs	r3, #2
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d11f      	bne.n	800486e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	e016      	b.n	800486e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f103 020c 	add.w	r2, r3, #12
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d120      	bne.n	80048bc <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004882:	d10b      	bne.n	800489c <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004892:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a0b      	ldr	r2, [pc, #44]	@ (80048c4 <SPI_2linesRxISR_8BIT+0xe0>)
 8004898:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800489a:	e00f      	b.n	80048bc <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048aa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fbac 	bl	8005014 <SPI_CloseRxTx_ISR>
    }
  }
}
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	080048c9 	.word	0x080048c9

080048c8 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80048e4:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ea:	1e5a      	subs	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10f      	bne.n	8004918 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004906:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fb7e 	bl	8005014 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d912      	bls.n	8004958 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b02      	subs	r3, #2
 8004950:	b29a      	uxth	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004956:	e012      	b.n	800497e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d126      	bne.n	80049d6 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004990:	d110      	bne.n	80049b4 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049a0:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049b0:	605a      	str	r2, [r3, #4]
      return;
 80049b2:	e010      	b.n	80049d6 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049c2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb1f 	bl	8005014 <SPI_CloseRxTx_ISR>
    }
  }
}
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	b292      	uxth	r2, r2
 80049f0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	1c9a      	adds	r2, r3, #2
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d118      	bne.n	8004a4c <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a22:	d103      	bne.n	8004a2c <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a0b      	ldr	r2, [pc, #44]	@ (8004a54 <SPI_2linesRxISR_16BIT+0x78>)
 8004a28:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8004a2a:	e00f      	b.n	8004a4c <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a3a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fae4 	bl	8005014 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	08004a59 	.word	0x08004a59

08004a58 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8004a6c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a7c:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fac8 	bl	8005014 <SPI_CloseRxTx_ISR>
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	881a      	ldrh	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	1c9a      	adds	r2, r3, #2
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d126      	bne.n	8004b10 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aca:	d110      	bne.n	8004aee <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ada:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004aea:	605a      	str	r2, [r3, #4]
      return;
 8004aec:	e010      	b.n	8004b10 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004afc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa82 	bl	8005014 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8004b32:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fac0 	bl	80050cc <SPI_CloseRx_ISR>
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f103 020c 	add.w	r2, r3, #12
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	7812      	ldrb	r2, [r2, #0]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10c      	bne.n	8004bb0 <SPI_RxISR_8BIT+0x5c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9e:	d107      	bne.n	8004bb0 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bae:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc4:	d103      	bne.n	8004bce <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a04      	ldr	r2, [pc, #16]	@ (8004bdc <SPI_RxISR_8BIT+0x88>)
 8004bca:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8004bcc:	e002      	b.n	8004bd4 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa7c 	bl	80050cc <SPI_CloseRx_ISR>
  }
}
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	08004b17 	.word	0x08004b17

08004be0 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8004bf4:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c04:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa60 	bl	80050cc <SPI_CloseRx_ISR>
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	b292      	uxth	r2, r2
 8004c28:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	1c9a      	adds	r2, r3, #2
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d10c      	bne.n	8004c6c <SPI_RxISR_16BIT+0x58>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5a:	d107      	bne.n	8004c6c <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c6a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c80:	d103      	bne.n	8004c8a <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a04      	ldr	r2, [pc, #16]	@ (8004c98 <SPI_RxISR_16BIT+0x84>)
 8004c86:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8004c88:	e002      	b.n	8004c90 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa1e 	bl	80050cc <SPI_CloseRx_ISR>
  }
}
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	08004be1 	.word	0x08004be1

08004c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cac:	f7fd fa82 	bl	80021b4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cbc:	f7fd fa7a 	bl	80021b4 <HAL_GetTick>
 8004cc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cc2:	4b39      	ldr	r3, [pc, #228]	@ (8004da8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	015b      	lsls	r3, r3, #5
 8004cc8:	0d1b      	lsrs	r3, r3, #20
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cd2:	e054      	b.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cda:	d050      	beq.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cdc:	f7fd fa6a 	bl	80021b4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d902      	bls.n	8004cf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d13d      	bne.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d0a:	d111      	bne.n	8004d30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d14:	d004      	beq.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1e:	d107      	bne.n	8004d30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d38:	d10f      	bne.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e017      	b.n	8004d9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	bf0c      	ite	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	2300      	movne	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d19b      	bne.n	8004cd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000008 	.word	0x20000008

08004dac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	@ 0x28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dbe:	f7fd f9f9 	bl	80021b4 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	4413      	add	r3, r2
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004dce:	f7fd f9f1 	bl	80021b4 <HAL_GetTick>
 8004dd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	00da      	lsls	r2, r3, #3
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	0d1b      	lsrs	r3, r3, #20
 8004dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004df4:	e060      	b.n	8004eb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004dfc:	d107      	bne.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e14:	d050      	beq.n	8004eb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e16:	f7fd f9cd 	bl	80021b4 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d902      	bls.n	8004e2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d13d      	bne.n	8004ea8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e44:	d111      	bne.n	8004e6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e4e:	d004      	beq.n	8004e5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e58:	d107      	bne.n	8004e6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e72:	d10f      	bne.n	8004e94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e010      	b.n	8004eca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d196      	bne.n	8004df6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3728      	adds	r7, #40	@ 0x28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000008 	.word	0x20000008

08004ed8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eec:	d111      	bne.n	8004f12 <SPI_EndRxTransaction+0x3a>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef6:	d004      	beq.n	8004f02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f00:	d107      	bne.n	8004f12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f10:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2180      	movs	r1, #128	@ 0x80
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff febd 	bl	8004c9c <SPI_WaitFlagStateUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e023      	b.n	8004f80 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f40:	d11d      	bne.n	8004f7e <SPI_EndRxTransaction+0xa6>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f4a:	d004      	beq.n	8004f56 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f54:	d113      	bne.n	8004f7e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff ff22 	bl	8004dac <SPI_WaitFifoStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e000      	b.n	8004f80 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7ff ff03 	bl	8004dac <SPI_WaitFifoStateUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e027      	b.n	800500c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2180      	movs	r1, #128	@ 0x80
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f7ff fe68 	bl	8004c9c <SPI_WaitFlagStateUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e014      	b.n	800500c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff fedc 	bl	8004dac <SPI_WaitFifoStateUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d007      	beq.n	800500a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffe:	f043 0220 	orr.w	r2, r3, #32
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e000      	b.n	800500c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800501c:	f7fd f8ca 	bl	80021b4 <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0220 	bic.w	r2, r2, #32
 8005030:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	2164      	movs	r1, #100	@ 0x64
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ffa6 	bl	8004f88 <SPI_EndRxTxTransaction>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b10      	cmp	r3, #16
 800505a:	d112      	bne.n	8005082 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005068:	f043 0202 	orr.w	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005078:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fb fdb8 	bl	8000bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005080:	e020      	b.n	80050c4 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005086:	2b00      	cmp	r3, #0
 8005088:	d115      	bne.n	80050b6 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b04      	cmp	r3, #4
 8005094:	d107      	bne.n	80050a6 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fb fd30 	bl	8000b04 <HAL_SPI_RxCpltCallback>
}
 80050a4:	e00e      	b.n	80050c4 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff fb7a 	bl	80047a8 <HAL_SPI_TxRxCpltCallback>
}
 80050b4:	e006      	b.n	80050c4 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fb fd96 	bl	8000bf0 <HAL_SPI_ErrorCallback>
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050e2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80050e4:	f7fd f866 	bl	80021b4 <HAL_GetTick>
 80050e8:	4603      	mov	r3, r0
 80050ea:	461a      	mov	r2, r3
 80050ec:	2164      	movs	r1, #100	@ 0x64
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fef2 	bl	8004ed8 <SPI_EndRxTransaction>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d10e      	bne.n	800513a <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005120:	f043 0202 	orr.w	r2, r3, #2
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005130:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fb fd5c 	bl	8000bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005138:	e00a      	b.n	8005150 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fb fcde 	bl	8000b04 <HAL_SPI_RxCpltCallback>
}
 8005148:	e002      	b.n	8005150 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb fd50 	bl	8000bf0 <HAL_SPI_ErrorCallback>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005160:	4b06      	ldr	r3, [pc, #24]	@ (800517c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005168:	4904      	ldr	r1, [pc, #16]	@ (800517c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	58000400 	.word	0x58000400

08005180 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518a:	4a04      	ldr	r2, [pc, #16]	@ (800519c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800518c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr
 800519c:	58000400 	.word	0x58000400

080051a0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80051a4:	4b05      	ldr	r3, [pc, #20]	@ (80051bc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	4a04      	ldr	r2, [pc, #16]	@ (80051bc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80051ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	58000400 	.word	0x58000400

080051c0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80051c4:	4b03      	ldr	r3, [pc, #12]	@ (80051d4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80051c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ca:	619a      	str	r2, [r3, #24]
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	58000400 	.word	0x58000400

080051d8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d101      	bne.n	80051ec <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	58000400 	.word	0x58000400

080051fc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005200:	4b06      	ldr	r3, [pc, #24]	@ (800521c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d101      	bne.n	8005210 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	58000400 	.word	0x58000400

08005220 <LL_RCC_RF_DisableReset>:
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800522c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005230:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005234:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <LL_RCC_IsRFUnderReset>:
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800524c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005254:	d101      	bne.n	800525a <LL_RCC_IsRFUnderReset+0x1a>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <LL_RCC_IsRFUnderReset+0x1c>
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800526c:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <LL_EXTI_EnableIT_32_63+0x24>)
 800526e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005272:	4905      	ldr	r1, [pc, #20]	@ (8005288 <LL_EXTI_EnableIT_32_63+0x24>)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	58000800 	.word	0x58000800

0800528c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
    return status;
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	e052      	b.n	8005348 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	799b      	ldrb	r3, [r3, #6]
 80052aa:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80052ac:	7bbb      	ldrb	r3, [r7, #14]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_SUBGHZ_Init+0x2c>
 80052b2:	7bbb      	ldrb	r3, [r7, #14]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d109      	bne.n	80052cc <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fb fdee 	bl	8000ea0 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80052c4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80052c8:	f7ff ffcc 	bl	8005264 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80052cc:	7bbb      	ldrb	r3, [r7, #14]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d126      	bne.n	8005320 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80052d8:	f7ff ffa2 	bl	8005220 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80052dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005350 <HAL_SUBGHZ_Init+0xc4>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	0cdb      	lsrs	r3, r3, #19
 80052ea:	2264      	movs	r2, #100	@ 0x64
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d105      	bne.n	8005304 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	609a      	str	r2, [r3, #8]
        break;
 8005302:	e007      	b.n	8005314 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800530a:	f7ff ff99 	bl	8005240 <LL_RCC_IsRFUnderReset>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ee      	bne.n	80052f2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005314:	f7ff ff34 	bl	8005180 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005318:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800531c:	f7ff ff1c 	bl	8005158 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005320:	f7ff ff4e 	bl	80051c0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fa58 	bl	80057e4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	719a      	strb	r2, [r3, #6]

  return status;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20000008 	.word	0x20000008

08005354 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	461a      	mov	r2, r3
 8005360:	460b      	mov	r3, r1
 8005362:	817b      	strh	r3, [r7, #10]
 8005364:	4613      	mov	r3, r2
 8005366:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	799b      	ldrb	r3, [r3, #6]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	d14a      	bne.n	8005408 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	795b      	ldrb	r3, [r3, #5]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800537a:	2302      	movs	r3, #2
 800537c:	e045      	b.n	800540a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2202      	movs	r2, #2
 8005388:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 faf8 	bl	8005980 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005390:	f7ff ff06 	bl	80051a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005394:	210d      	movs	r1, #13
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fa44 	bl	8005824 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800539c:	897b      	ldrh	r3, [r7, #10]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	4619      	mov	r1, r3
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fa3c 	bl	8005824 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80053ac:	897b      	ldrh	r3, [r7, #10]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	4619      	mov	r1, r3
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fa36 	bl	8005824 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	82bb      	strh	r3, [r7, #20]
 80053bc:	e00a      	b.n	80053d4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80053be:	8abb      	ldrh	r3, [r7, #20]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	4413      	add	r3, r2
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	4619      	mov	r1, r3
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fa2b 	bl	8005824 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80053ce:	8abb      	ldrh	r3, [r7, #20]
 80053d0:	3301      	adds	r3, #1
 80053d2:	82bb      	strh	r3, [r7, #20]
 80053d4:	8aba      	ldrh	r2, [r7, #20]
 80053d6:	893b      	ldrh	r3, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3f0      	bcc.n	80053be <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80053dc:	f7ff fed0 	bl	8005180 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 faf1 	bl	80059c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
 80053f2:	e001      	b.n	80053f8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	715a      	strb	r2, [r3, #5]

    return status;
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	e000      	b.n	800540a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005408:	2302      	movs	r3, #2
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b088      	sub	sp, #32
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	461a      	mov	r2, r3
 800541e:	460b      	mov	r3, r1
 8005420:	817b      	strh	r3, [r7, #10]
 8005422:	4613      	mov	r3, r2
 8005424:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	799b      	ldrb	r3, [r3, #6]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d14a      	bne.n	80054ca <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	795b      	ldrb	r3, [r3, #5]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800543c:	2302      	movs	r3, #2
 800543e:	e045      	b.n	80054cc <HAL_SUBGHZ_ReadRegisters+0xba>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fa9a 	bl	8005980 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800544c:	f7ff fea8 	bl	80051a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005450:	211d      	movs	r1, #29
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f9e6 	bl	8005824 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005458:	897b      	ldrh	r3, [r7, #10]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	b29b      	uxth	r3, r3
 800545e:	b2db      	uxtb	r3, r3
 8005460:	4619      	mov	r1, r3
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 f9de 	bl	8005824 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005468:	897b      	ldrh	r3, [r7, #10]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	4619      	mov	r1, r3
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f9d8 	bl	8005824 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005474:	2100      	movs	r1, #0
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f9d4 	bl	8005824 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800547c:	2300      	movs	r3, #0
 800547e:	82fb      	strh	r3, [r7, #22]
 8005480:	e009      	b.n	8005496 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005482:	69b9      	ldr	r1, [r7, #24]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fa23 	bl	80058d0 <SUBGHZSPI_Receive>
      pData++;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3301      	adds	r3, #1
 800548e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005490:	8afb      	ldrh	r3, [r7, #22]
 8005492:	3301      	adds	r3, #1
 8005494:	82fb      	strh	r3, [r7, #22]
 8005496:	8afa      	ldrh	r2, [r7, #22]
 8005498:	893b      	ldrh	r3, [r7, #8]
 800549a:	429a      	cmp	r2, r3
 800549c:	d3f1      	bcc.n	8005482 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800549e:	f7ff fe6f 	bl	8005180 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fa90 	bl	80059c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e001      	b.n	80054ba <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	715a      	strb	r2, [r3, #5]

    return status;
 80054c6:	7ffb      	ldrb	r3, [r7, #31]
 80054c8:	e000      	b.n	80054cc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	461a      	mov	r2, r3
 80054e0:	460b      	mov	r3, r1
 80054e2:	72fb      	strb	r3, [r7, #11]
 80054e4:	4613      	mov	r3, r2
 80054e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	799b      	ldrb	r3, [r3, #6]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d14a      	bne.n	8005588 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	795b      	ldrb	r3, [r3, #5]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e045      	b.n	800558a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 fa3b 	bl	8005980 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800550a:	7afb      	ldrb	r3, [r7, #11]
 800550c:	2b84      	cmp	r3, #132	@ 0x84
 800550e:	d002      	beq.n	8005516 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005510:	7afb      	ldrb	r3, [r7, #11]
 8005512:	2b94      	cmp	r3, #148	@ 0x94
 8005514:	d103      	bne.n	800551e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	711a      	strb	r2, [r3, #4]
 800551c:	e002      	b.n	8005524 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005524:	f7ff fe3c 	bl	80051a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005528:	7afb      	ldrb	r3, [r7, #11]
 800552a:	4619      	mov	r1, r3
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f979 	bl	8005824 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005532:	2300      	movs	r3, #0
 8005534:	82bb      	strh	r3, [r7, #20]
 8005536:	e00a      	b.n	800554e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005538:	8abb      	ldrh	r3, [r7, #20]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f96e 	bl	8005824 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005548:	8abb      	ldrh	r3, [r7, #20]
 800554a:	3301      	adds	r3, #1
 800554c:	82bb      	strh	r3, [r7, #20]
 800554e:	8aba      	ldrh	r2, [r7, #20]
 8005550:	893b      	ldrh	r3, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	d3f0      	bcc.n	8005538 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005556:	f7ff fe13 	bl	8005180 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800555a:	7afb      	ldrb	r3, [r7, #11]
 800555c:	2b84      	cmp	r3, #132	@ 0x84
 800555e:	d002      	beq.n	8005566 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fa31 	bl	80059c8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
 8005572:	e001      	b.n	8005578 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	715a      	strb	r2, [r3, #5]

    return status;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	e000      	b.n	800558a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b088      	sub	sp, #32
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	461a      	mov	r2, r3
 800559e:	460b      	mov	r3, r1
 80055a0:	72fb      	strb	r3, [r7, #11]
 80055a2:	4613      	mov	r3, r2
 80055a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	799b      	ldrb	r3, [r3, #6]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d13d      	bne.n	8005630 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	795b      	ldrb	r3, [r3, #5]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80055bc:	2302      	movs	r3, #2
 80055be:	e038      	b.n	8005632 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f9da 	bl	8005980 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80055cc:	f7ff fde8 	bl	80051a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80055d0:	7afb      	ldrb	r3, [r7, #11]
 80055d2:	4619      	mov	r1, r3
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f925 	bl	8005824 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80055da:	2100      	movs	r1, #0
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f921 	bl	8005824 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	82fb      	strh	r3, [r7, #22]
 80055e6:	e009      	b.n	80055fc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80055e8:	69b9      	ldr	r1, [r7, #24]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f970 	bl	80058d0 <SUBGHZSPI_Receive>
      pData++;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	3301      	adds	r3, #1
 80055f4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80055f6:	8afb      	ldrh	r3, [r7, #22]
 80055f8:	3301      	adds	r3, #1
 80055fa:	82fb      	strh	r3, [r7, #22]
 80055fc:	8afa      	ldrh	r2, [r7, #22]
 80055fe:	893b      	ldrh	r3, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d3f1      	bcc.n	80055e8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005604:	f7ff fdbc 	bl	8005180 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f9dd 	bl	80059c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e001      	b.n	8005620 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	715a      	strb	r2, [r3, #5]

    return status;
 800562c:	7ffb      	ldrb	r3, [r7, #31]
 800562e:	e000      	b.n	8005632 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005630:	2302      	movs	r3, #2
  }
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b086      	sub	sp, #24
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	461a      	mov	r2, r3
 8005646:	460b      	mov	r3, r1
 8005648:	72fb      	strb	r3, [r7, #11]
 800564a:	4613      	mov	r3, r2
 800564c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	799b      	ldrb	r3, [r3, #6]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d13e      	bne.n	80056d6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	795b      	ldrb	r3, [r3, #5]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005660:	2302      	movs	r3, #2
 8005662:	e039      	b.n	80056d8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f988 	bl	8005980 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005670:	f7ff fd96 	bl	80051a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005674:	210e      	movs	r1, #14
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f8d4 	bl	8005824 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	4619      	mov	r1, r3
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f8cf 	bl	8005824 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005686:	2300      	movs	r3, #0
 8005688:	82bb      	strh	r3, [r7, #20]
 800568a:	e00a      	b.n	80056a2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800568c:	8abb      	ldrh	r3, [r7, #20]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	4619      	mov	r1, r3
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f8c4 	bl	8005824 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800569c:	8abb      	ldrh	r3, [r7, #20]
 800569e:	3301      	adds	r3, #1
 80056a0:	82bb      	strh	r3, [r7, #20]
 80056a2:	8aba      	ldrh	r2, [r7, #20]
 80056a4:	893b      	ldrh	r3, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3f0      	bcc.n	800568c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80056aa:	f7ff fd69 	bl	8005180 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f98a 	bl	80059c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	75fb      	strb	r3, [r7, #23]
 80056c0:	e001      	b.n	80056c6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	715a      	strb	r2, [r3, #5]

    return status;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	e000      	b.n	80056d8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80056e8:	2300      	movs	r3, #0
 80056ea:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80056ec:	f107 020c 	add.w	r2, r7, #12
 80056f0:	2302      	movs	r3, #2
 80056f2:	2112      	movs	r1, #18
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ff4c 	bl	8005592 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80056fa:	7b3b      	ldrb	r3, [r7, #12]
 80056fc:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80056fe:	89fb      	ldrh	r3, [r7, #14]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	b21a      	sxth	r2, r3
 8005704:	7b7b      	ldrb	r3, [r7, #13]
 8005706:	b21b      	sxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b21b      	sxth	r3, r3
 800570c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800570e:	f107 020c 	add.w	r2, r7, #12
 8005712:	2302      	movs	r3, #2
 8005714:	2102      	movs	r1, #2
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fedc 	bl	80054d4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800571c:	89fb      	ldrh	r3, [r7, #14]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc fc16 	bl	8001f58 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800572c:	89fb      	ldrh	r3, [r7, #14]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8005736:	89fb      	ldrh	r3, [r7, #14]
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fc fc17 	bl	8001f74 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005746:	89fb      	ldrh	r3, [r7, #14]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7fc fc67 	bl	8002024 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005756:	89fb      	ldrh	r3, [r7, #14]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fc fc6d 	bl	8002040 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7fc fc73 	bl	800205c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005776:	89fb      	ldrh	r3, [r7, #14]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fc fc41 	bl	8002008 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005786:	89fb      	ldrh	r3, [r7, #14]
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fc fbfd 	bl	8001f90 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005796:	89fb      	ldrh	r3, [r7, #14]
 8005798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80057a0:	89fb      	ldrh	r3, [r7, #14]
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80057aa:	2101      	movs	r1, #1
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fc fbfd 	bl	8001fac <HAL_SUBGHZ_CADStatusCallback>
 80057b2:	e003      	b.n	80057bc <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80057b4:	2100      	movs	r1, #0
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc fbf8 	bl	8001fac <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80057bc:	89fb      	ldrh	r3, [r7, #14]
 80057be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fc fc0e 	bl	8001fe8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc fc4e 	bl	8002078 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <SUBGHZSPI_Init+0x3c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0b      	ldr	r2, [pc, #44]	@ (8005820 <SUBGHZSPI_Init+0x3c>)
 80057f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057f6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80057f8:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <SUBGHZSPI_Init+0x3c>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8005800:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005802:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <SUBGHZSPI_Init+0x3c>)
 8005804:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005808:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800580a:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <SUBGHZSPI_Init+0x3c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a04      	ldr	r2, [pc, #16]	@ (8005820 <SUBGHZSPI_Init+0x3c>)
 8005810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005814:	6013      	str	r3, [r2, #0]
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	58010000 	.word	0x58010000

08005824 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005834:	4b23      	ldr	r3, [pc, #140]	@ (80058c4 <SUBGHZSPI_Transmit+0xa0>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	0cdb      	lsrs	r3, r3, #19
 8005842:	2264      	movs	r2, #100	@ 0x64
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	609a      	str	r2, [r3, #8]
      break;
 800585a:	e008      	b.n	800586e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3b01      	subs	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005862:	4b19      	ldr	r3, [pc, #100]	@ (80058c8 <SUBGHZSPI_Transmit+0xa4>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d1ed      	bne.n	800584a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800586e:	4b17      	ldr	r3, [pc, #92]	@ (80058cc <SUBGHZSPI_Transmit+0xa8>)
 8005870:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005878:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <SUBGHZSPI_Transmit+0xa0>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	0cdb      	lsrs	r3, r3, #19
 8005886:	2264      	movs	r2, #100	@ 0x64
 8005888:	fb02 f303 	mul.w	r3, r2, r3
 800588c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	609a      	str	r2, [r3, #8]
      break;
 800589e:	e008      	b.n	80058b2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80058a6:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <SUBGHZSPI_Transmit+0xa4>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d1ed      	bne.n	800588e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80058b2:	4b05      	ldr	r3, [pc, #20]	@ (80058c8 <SUBGHZSPI_Transmit+0xa4>)
 80058b4:	68db      	ldr	r3, [r3, #12]

  return status;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000008 	.word	0x20000008
 80058c8:	58010000 	.word	0x58010000
 80058cc:	5801000c 	.word	0x5801000c

080058d0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80058de:	4b25      	ldr	r3, [pc, #148]	@ (8005974 <SUBGHZSPI_Receive+0xa4>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	0cdb      	lsrs	r3, r3, #19
 80058ec:	2264      	movs	r2, #100	@ 0x64
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	609a      	str	r2, [r3, #8]
      break;
 8005904:	e008      	b.n	8005918 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3b01      	subs	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800590c:	4b1a      	ldr	r3, [pc, #104]	@ (8005978 <SUBGHZSPI_Receive+0xa8>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b02      	cmp	r3, #2
 8005916:	d1ed      	bne.n	80058f4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005918:	4b18      	ldr	r3, [pc, #96]	@ (800597c <SUBGHZSPI_Receive+0xac>)
 800591a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	22ff      	movs	r2, #255	@ 0xff
 8005920:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005922:	4b14      	ldr	r3, [pc, #80]	@ (8005974 <SUBGHZSPI_Receive+0xa4>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4613      	mov	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	0cdb      	lsrs	r3, r3, #19
 8005930:	2264      	movs	r2, #100	@ 0x64
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d105      	bne.n	800594a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	609a      	str	r2, [r3, #8]
      break;
 8005948:	e008      	b.n	800595c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b01      	subs	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005950:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <SUBGHZSPI_Receive+0xa8>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d1ed      	bne.n	8005938 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <SUBGHZSPI_Receive+0xa8>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	701a      	strb	r2, [r3, #0]

  return status;
 8005966:	7dfb      	ldrb	r3, [r7, #23]
}
 8005968:	4618      	mov	r0, r3
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000008 	.word	0x20000008
 8005978:	58010000 	.word	0x58010000
 800597c:	5801000c 	.word	0x5801000c

08005980 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	791b      	ldrb	r3, [r3, #4]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d111      	bne.n	80059b4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <SUBGHZ_CheckDeviceReady+0x44>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4413      	add	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80059a0:	f7ff fbfe 	bl	80051a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f9      	bne.n	80059a4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80059b0:	f7ff fbe6 	bl	8005180 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f807 	bl	80059c8 <SUBGHZ_WaitOnBusy>
 80059ba:	4603      	mov	r3, r0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000008 	.word	0x20000008

080059c8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80059d4:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <SUBGHZ_WaitOnBusy+0x58>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	4413      	add	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	0d1b      	lsrs	r3, r3, #20
 80059e2:	2264      	movs	r2, #100	@ 0x64
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80059ea:	f7ff fc07 	bl	80051fc <LL_PWR_IsActiveFlag_RFBUSYMS>
 80059ee:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d105      	bne.n	8005a02 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	609a      	str	r2, [r3, #8]
      break;
 8005a00:	e009      	b.n	8005a16 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005a08:	f7ff fbe6 	bl	80051d8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d0e9      	beq.n	80059ea <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000008 	.word	0x20000008

08005a24 <LL_RCC_GetUSARTClockSource>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	401a      	ands	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	4313      	orrs	r3, r2
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <LL_RCC_GetLPUARTClockSource>:
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a54:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4013      	ands	r3, r2
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e042      	b.n	8005afe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb fad4 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2224      	movs	r2, #36	@ 0x24
 8005a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0201 	bic.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fb23 	bl	80060fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8ac 	bl	8005c14 <UART_SetConfig>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e01b      	b.n	8005afe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ad4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ae4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fba1 	bl	800623e <UART_CheckIdleState>
 8005afc:	4603      	mov	r3, r0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b08a      	sub	sp, #40	@ 0x28
 8005b0a:	af02      	add	r7, sp, #8
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d173      	bne.n	8005c08 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_UART_Transmit+0x26>
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e06c      	b.n	8005c0a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2221      	movs	r2, #33	@ 0x21
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b40:	f7fc fb38 	bl	80021b4 <HAL_GetTick>
 8005b44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5e:	d108      	bne.n	8005b72 <HAL_UART_Transmit+0x6c>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	e003      	b.n	8005b7a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b7a:	e02c      	b.n	8005bd6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2200      	movs	r2, #0
 8005b84:	2180      	movs	r1, #128	@ 0x80
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fba7 	bl	80062da <UART_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e039      	b.n	8005c0a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005baa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	3302      	adds	r3, #2
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e007      	b.n	8005bc4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	781a      	ldrb	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1cc      	bne.n	8005b7c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2200      	movs	r2, #0
 8005bea:	2140      	movs	r1, #64	@ 0x40
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fb74 	bl	80062da <UART_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e006      	b.n	8005c0a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005c08:	2302      	movs	r3, #2
  }
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c18:	b08c      	sub	sp, #48	@ 0x30
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b94      	ldr	r3, [pc, #592]	@ (8005e94 <UART_SetConfig+0x280>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a89      	ldr	r2, [pc, #548]	@ (8005e98 <UART_SetConfig+0x284>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005c8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	f023 010f 	bic.w	r1, r3, #15
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a7a      	ldr	r2, [pc, #488]	@ (8005e9c <UART_SetConfig+0x288>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d127      	bne.n	8005d08 <UART_SetConfig+0xf4>
 8005cb8:	2003      	movs	r0, #3
 8005cba:	f7ff feb3 	bl	8005a24 <LL_RCC_GetUSARTClockSource>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d81b      	bhi.n	8005d00 <UART_SetConfig+0xec>
 8005cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <UART_SetConfig+0xbc>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	08005ce9 	.word	0x08005ce9
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce6:	e080      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cee:	e07c      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf6:	e078      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cfe:	e074      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005d00:	2310      	movs	r3, #16
 8005d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d06:	e070      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a64      	ldr	r2, [pc, #400]	@ (8005ea0 <UART_SetConfig+0x28c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d138      	bne.n	8005d84 <UART_SetConfig+0x170>
 8005d12:	200c      	movs	r0, #12
 8005d14:	f7ff fe86 	bl	8005a24 <LL_RCC_GetUSARTClockSource>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005d1e:	2b0c      	cmp	r3, #12
 8005d20:	d82c      	bhi.n	8005d7c <UART_SetConfig+0x168>
 8005d22:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <UART_SetConfig+0x114>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d5d 	.word	0x08005d5d
 8005d2c:	08005d7d 	.word	0x08005d7d
 8005d30:	08005d7d 	.word	0x08005d7d
 8005d34:	08005d7d 	.word	0x08005d7d
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005d7d 	.word	0x08005d7d
 8005d40:	08005d7d 	.word	0x08005d7d
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005d65 	.word	0x08005d65
 8005d4c:	08005d7d 	.word	0x08005d7d
 8005d50:	08005d7d 	.word	0x08005d7d
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d75 	.word	0x08005d75
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d62:	e042      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005d64:	2302      	movs	r3, #2
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6a:	e03e      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d72:	e03a      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7a:	e036      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d82:	e032      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a43      	ldr	r2, [pc, #268]	@ (8005e98 <UART_SetConfig+0x284>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d12a      	bne.n	8005de4 <UART_SetConfig+0x1d0>
 8005d8e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005d92:	f7ff fe59 	bl	8005a48 <LL_RCC_GetLPUARTClockSource>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d9c:	d01a      	beq.n	8005dd4 <UART_SetConfig+0x1c0>
 8005d9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005da2:	d81b      	bhi.n	8005ddc <UART_SetConfig+0x1c8>
 8005da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da8:	d00c      	beq.n	8005dc4 <UART_SetConfig+0x1b0>
 8005daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dae:	d815      	bhi.n	8005ddc <UART_SetConfig+0x1c8>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <UART_SetConfig+0x1a8>
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db8:	d008      	beq.n	8005dcc <UART_SetConfig+0x1b8>
 8005dba:	e00f      	b.n	8005ddc <UART_SetConfig+0x1c8>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc2:	e012      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dca:	e00e      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd2:	e00a      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dda:	e006      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005de2:	e002      	b.n	8005dea <UART_SetConfig+0x1d6>
 8005de4:	2310      	movs	r3, #16
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <UART_SetConfig+0x284>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	f040 80a4 	bne.w	8005f3e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005df6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d823      	bhi.n	8005e46 <UART_SetConfig+0x232>
 8005dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <UART_SetConfig+0x1f0>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e47 	.word	0x08005e47
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e47 	.word	0x08005e47
 8005e14:	08005e37 	.word	0x08005e37
 8005e18:	08005e47 	.word	0x08005e47
 8005e1c:	08005e47 	.word	0x08005e47
 8005e20:	08005e47 	.word	0x08005e47
 8005e24:	08005e3f 	.word	0x08005e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fd fe66 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e2e:	e010      	b.n	8005e52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e30:	4b1c      	ldr	r3, [pc, #112]	@ (8005ea4 <UART_SetConfig+0x290>)
 8005e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e34:	e00d      	b.n	8005e52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e36:	f7fd fdab 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005e3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e3c:	e009      	b.n	8005e52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e44:	e005      	b.n	8005e52 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8137 	beq.w	80060c8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	4a12      	ldr	r2, [pc, #72]	@ (8005ea8 <UART_SetConfig+0x294>)
 8005e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4413      	add	r3, r2
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d305      	bcc.n	8005e8a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d910      	bls.n	8005eac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e90:	e11a      	b.n	80060c8 <UART_SetConfig+0x4b4>
 8005e92:	bf00      	nop
 8005e94:	cfff69f3 	.word	0xcfff69f3
 8005e98:	40008000 	.word	0x40008000
 8005e9c:	40013800 	.word	0x40013800
 8005ea0:	40004400 	.word	0x40004400
 8005ea4:	00f42400 	.word	0x00f42400
 8005ea8:	080071b4 	.word	0x080071b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	2200      	movs	r2, #0
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	60fa      	str	r2, [r7, #12]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	4a8e      	ldr	r2, [pc, #568]	@ (80060f4 <UART_SetConfig+0x4e0>)
 8005eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ece:	f7fa f9af 	bl	8000230 <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	020b      	lsls	r3, r1, #8
 8005ee4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ee8:	0202      	lsls	r2, r0, #8
 8005eea:	6979      	ldr	r1, [r7, #20]
 8005eec:	6849      	ldr	r1, [r1, #4]
 8005eee:	0849      	lsrs	r1, r1, #1
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	eb12 0804 	adds.w	r8, r2, r4
 8005efa:	eb43 0905 	adc.w	r9, r3, r5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	469a      	mov	sl, r3
 8005f06:	4693      	mov	fp, r2
 8005f08:	4652      	mov	r2, sl
 8005f0a:	465b      	mov	r3, fp
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	4649      	mov	r1, r9
 8005f10:	f7fa f98e 	bl	8000230 <__aeabi_uldivmod>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4613      	mov	r3, r2
 8005f1a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f22:	d308      	bcc.n	8005f36 <UART_SetConfig+0x322>
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f2a:	d204      	bcs.n	8005f36 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	60da      	str	r2, [r3, #12]
 8005f34:	e0c8      	b.n	80060c8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f3c:	e0c4      	b.n	80060c8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f46:	d167      	bne.n	8006018 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005f48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d828      	bhi.n	8005fa2 <UART_SetConfig+0x38e>
 8005f50:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <UART_SetConfig+0x344>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f8d 	.word	0x08005f8d
 8005f64:	08005fa3 	.word	0x08005fa3
 8005f68:	08005f93 	.word	0x08005f93
 8005f6c:	08005fa3 	.word	0x08005fa3
 8005f70:	08005fa3 	.word	0x08005fa3
 8005f74:	08005fa3 	.word	0x08005fa3
 8005f78:	08005f9b 	.word	0x08005f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7c:	f7fd fdbc 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8005f80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f82:	e014      	b.n	8005fae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f84:	f7fd fdca 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f8a:	e010      	b.n	8005fae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80060f8 <UART_SetConfig+0x4e4>)
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f90:	e00d      	b.n	8005fae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f92:	f7fd fcfd 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005f96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f98:	e009      	b.n	8005fae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fa0:	e005      	b.n	8005fae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8089 	beq.w	80060c8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fba:	4a4e      	ldr	r2, [pc, #312]	@ (80060f4 <UART_SetConfig+0x4e0>)
 8005fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc8:	005a      	lsls	r2, r3, #1
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	441a      	add	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b0f      	cmp	r3, #15
 8005fe0:	d916      	bls.n	8006010 <UART_SetConfig+0x3fc>
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe8:	d212      	bcs.n	8006010 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f023 030f 	bic.w	r3, r3, #15
 8005ff2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	8bfb      	ldrh	r3, [r7, #30]
 8006002:	4313      	orrs	r3, r2
 8006004:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	8bfa      	ldrh	r2, [r7, #30]
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	e05b      	b.n	80060c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006016:	e057      	b.n	80060c8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006018:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800601c:	2b08      	cmp	r3, #8
 800601e:	d828      	bhi.n	8006072 <UART_SetConfig+0x45e>
 8006020:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <UART_SetConfig+0x414>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006055 	.word	0x08006055
 8006030:	0800605d 	.word	0x0800605d
 8006034:	08006073 	.word	0x08006073
 8006038:	08006063 	.word	0x08006063
 800603c:	08006073 	.word	0x08006073
 8006040:	08006073 	.word	0x08006073
 8006044:	08006073 	.word	0x08006073
 8006048:	0800606b 	.word	0x0800606b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800604c:	f7fd fd54 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8006050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006052:	e014      	b.n	800607e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006054:	f7fd fd62 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8006058:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800605a:	e010      	b.n	800607e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800605c:	4b26      	ldr	r3, [pc, #152]	@ (80060f8 <UART_SetConfig+0x4e4>)
 800605e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006060:	e00d      	b.n	800607e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006062:	f7fd fc95 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8006066:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006068:	e009      	b.n	800607e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006070:	e005      	b.n	800607e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800607c:	bf00      	nop
    }

    if (pclk != 0U)
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	2b00      	cmp	r3, #0
 8006082:	d021      	beq.n	80060c8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006088:	4a1a      	ldr	r2, [pc, #104]	@ (80060f4 <UART_SetConfig+0x4e0>)
 800608a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800608e:	461a      	mov	r2, r3
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	fbb3 f2f2 	udiv	r2, r3, r2
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	441a      	add	r2, r3
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	d909      	bls.n	80060c2 <UART_SetConfig+0x4ae>
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b4:	d205      	bcs.n	80060c2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	e002      	b.n	80060c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2200      	movs	r2, #0
 80060dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2200      	movs	r2, #0
 80060e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3730      	adds	r7, #48	@ 0x30
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f2:	bf00      	nop
 80060f4:	080071b4 	.word	0x080071b4
 80060f8:	00f42400 	.word	0x00f42400

080060fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01a      	beq.n	8006212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061fa:	d10a      	bne.n	8006212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	605a      	str	r2, [r3, #4]
  }
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b086      	sub	sp, #24
 8006242:	af02      	add	r7, sp, #8
 8006244:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800624e:	f7fb ffb1 	bl	80021b4 <HAL_GetTick>
 8006252:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b08      	cmp	r3, #8
 8006260:	d10e      	bne.n	8006280 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006262:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f832 	bl	80062da <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e028      	b.n	80062d2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b04      	cmp	r3, #4
 800628c:	d10e      	bne.n	80062ac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800628e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f81c 	bl	80062da <UART_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e012      	b.n	80062d2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b09c      	sub	sp, #112	@ 0x70
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	603b      	str	r3, [r7, #0]
 80062e6:	4613      	mov	r3, r2
 80062e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ea:	e0af      	b.n	800644c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062f2:	f000 80ab 	beq.w	800644c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f6:	f7fb ff5d 	bl	80021b4 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006302:	429a      	cmp	r2, r3
 8006304:	d302      	bcc.n	800630c <UART_WaitOnFlagUntilTimeout+0x32>
 8006306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006308:	2b00      	cmp	r3, #0
 800630a:	d140      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800631a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006320:	667b      	str	r3, [r7, #100]	@ 0x64
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800632a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800632c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006330:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e6      	bne.n	800630c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	663b      	str	r3, [r7, #96]	@ 0x60
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800635e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006360:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800636c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e06f      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d057      	beq.n	800644c <UART_WaitOnFlagUntilTimeout+0x172>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b80      	cmp	r3, #128	@ 0x80
 80063a0:	d054      	beq.n	800644c <UART_WaitOnFlagUntilTimeout+0x172>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b40      	cmp	r3, #64	@ 0x40
 80063a6:	d051      	beq.n	800644c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b6:	d149      	bne.n	800644c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80063d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	613b      	str	r3, [r7, #16]
   return(result);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006414:	623a      	str	r2, [r7, #32]
 8006416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	69f9      	ldr	r1, [r7, #28]
 800641a:	6a3a      	ldr	r2, [r7, #32]
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	61bb      	str	r3, [r7, #24]
   return(result);
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e010      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69da      	ldr	r2, [r3, #28]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4013      	ands	r3, r2
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	429a      	cmp	r2, r3
 800645a:	bf0c      	ite	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	2300      	movne	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	429a      	cmp	r2, r3
 8006468:	f43f af40 	beq.w	80062ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3770      	adds	r7, #112	@ 0x70
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_UARTEx_DisableFifoMode+0x16>
 8006488:	2302      	movs	r3, #2
 800648a:	e027      	b.n	80064dc <HAL_UARTEx_DisableFifoMode+0x66>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2224      	movs	r2, #36	@ 0x24
 8006498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr

080064e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e02d      	b.n	800655a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2224      	movs	r2, #36	@ 0x24
 800650a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0201 	bic.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f850 	bl	80065e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006576:	2302      	movs	r3, #2
 8006578:	e02d      	b.n	80065d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	@ 0x24
 8006586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0201 	bic.w	r2, r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f812 	bl	80065e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d108      	bne.n	8006602 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006600:	e031      	b.n	8006666 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006602:	2308      	movs	r3, #8
 8006604:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006606:	2308      	movs	r3, #8
 8006608:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	0e5b      	lsrs	r3, r3, #25
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	0f5b      	lsrs	r3, r3, #29
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	7b3a      	ldrb	r2, [r7, #12]
 800662e:	4910      	ldr	r1, [pc, #64]	@ (8006670 <UARTEx_SetNbDataToProcess+0x90>)
 8006630:	5c8a      	ldrb	r2, [r1, r2]
 8006632:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006636:	7b3a      	ldrb	r2, [r7, #12]
 8006638:	490e      	ldr	r1, [pc, #56]	@ (8006674 <UARTEx_SetNbDataToProcess+0x94>)
 800663a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800663c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	7b7a      	ldrb	r2, [r7, #13]
 800664c:	4908      	ldr	r1, [pc, #32]	@ (8006670 <UARTEx_SetNbDataToProcess+0x90>)
 800664e:	5c8a      	ldrb	r2, [r1, r2]
 8006650:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006654:	7b7a      	ldrb	r2, [r7, #13]
 8006656:	4907      	ldr	r1, [pc, #28]	@ (8006674 <UARTEx_SetNbDataToProcess+0x94>)
 8006658:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800665a:	fb93 f3f2 	sdiv	r3, r3, r2
 800665e:	b29a      	uxth	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr
 8006670:	080071cc 	.word	0x080071cc
 8006674:	080071d4 	.word	0x080071d4

08006678 <siprintf>:
 8006678:	b40e      	push	{r1, r2, r3}
 800667a:	b500      	push	{lr}
 800667c:	b09c      	sub	sp, #112	@ 0x70
 800667e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006680:	9002      	str	r0, [sp, #8]
 8006682:	9006      	str	r0, [sp, #24]
 8006684:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006688:	4809      	ldr	r0, [pc, #36]	@ (80066b0 <siprintf+0x38>)
 800668a:	9107      	str	r1, [sp, #28]
 800668c:	9104      	str	r1, [sp, #16]
 800668e:	4909      	ldr	r1, [pc, #36]	@ (80066b4 <siprintf+0x3c>)
 8006690:	f853 2b04 	ldr.w	r2, [r3], #4
 8006694:	9105      	str	r1, [sp, #20]
 8006696:	6800      	ldr	r0, [r0, #0]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	a902      	add	r1, sp, #8
 800669c:	f000 f9a2 	bl	80069e4 <_svfiprintf_r>
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	b01c      	add	sp, #112	@ 0x70
 80066a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ac:	b003      	add	sp, #12
 80066ae:	4770      	bx	lr
 80066b0:	20000020 	.word	0x20000020
 80066b4:	ffff0208 	.word	0xffff0208

080066b8 <memset>:
 80066b8:	4402      	add	r2, r0
 80066ba:	4603      	mov	r3, r0
 80066bc:	4293      	cmp	r3, r2
 80066be:	d100      	bne.n	80066c2 <memset+0xa>
 80066c0:	4770      	bx	lr
 80066c2:	f803 1b01 	strb.w	r1, [r3], #1
 80066c6:	e7f9      	b.n	80066bc <memset+0x4>

080066c8 <__errno>:
 80066c8:	4b01      	ldr	r3, [pc, #4]	@ (80066d0 <__errno+0x8>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000020 	.word	0x20000020

080066d4 <__libc_init_array>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	4d0d      	ldr	r5, [pc, #52]	@ (800670c <__libc_init_array+0x38>)
 80066d8:	4c0d      	ldr	r4, [pc, #52]	@ (8006710 <__libc_init_array+0x3c>)
 80066da:	1b64      	subs	r4, r4, r5
 80066dc:	10a4      	asrs	r4, r4, #2
 80066de:	2600      	movs	r6, #0
 80066e0:	42a6      	cmp	r6, r4
 80066e2:	d109      	bne.n	80066f8 <__libc_init_array+0x24>
 80066e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006714 <__libc_init_array+0x40>)
 80066e6:	4c0c      	ldr	r4, [pc, #48]	@ (8006718 <__libc_init_array+0x44>)
 80066e8:	f000 fc66 	bl	8006fb8 <_init>
 80066ec:	1b64      	subs	r4, r4, r5
 80066ee:	10a4      	asrs	r4, r4, #2
 80066f0:	2600      	movs	r6, #0
 80066f2:	42a6      	cmp	r6, r4
 80066f4:	d105      	bne.n	8006702 <__libc_init_array+0x2e>
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fc:	4798      	blx	r3
 80066fe:	3601      	adds	r6, #1
 8006700:	e7ee      	b.n	80066e0 <__libc_init_array+0xc>
 8006702:	f855 3b04 	ldr.w	r3, [r5], #4
 8006706:	4798      	blx	r3
 8006708:	3601      	adds	r6, #1
 800670a:	e7f2      	b.n	80066f2 <__libc_init_array+0x1e>
 800670c:	08007218 	.word	0x08007218
 8006710:	08007218 	.word	0x08007218
 8006714:	08007218 	.word	0x08007218
 8006718:	0800721c 	.word	0x0800721c

0800671c <__retarget_lock_acquire_recursive>:
 800671c:	4770      	bx	lr

0800671e <__retarget_lock_release_recursive>:
 800671e:	4770      	bx	lr

08006720 <memcpy>:
 8006720:	440a      	add	r2, r1
 8006722:	4291      	cmp	r1, r2
 8006724:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006728:	d100      	bne.n	800672c <memcpy+0xc>
 800672a:	4770      	bx	lr
 800672c:	b510      	push	{r4, lr}
 800672e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006736:	4291      	cmp	r1, r2
 8006738:	d1f9      	bne.n	800672e <memcpy+0xe>
 800673a:	bd10      	pop	{r4, pc}

0800673c <_free_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4605      	mov	r5, r0
 8006740:	2900      	cmp	r1, #0
 8006742:	d041      	beq.n	80067c8 <_free_r+0x8c>
 8006744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006748:	1f0c      	subs	r4, r1, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	bfb8      	it	lt
 800674e:	18e4      	addlt	r4, r4, r3
 8006750:	f000 f8e0 	bl	8006914 <__malloc_lock>
 8006754:	4a1d      	ldr	r2, [pc, #116]	@ (80067cc <_free_r+0x90>)
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	b933      	cbnz	r3, 8006768 <_free_r+0x2c>
 800675a:	6063      	str	r3, [r4, #4]
 800675c:	6014      	str	r4, [r2, #0]
 800675e:	4628      	mov	r0, r5
 8006760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006764:	f000 b8dc 	b.w	8006920 <__malloc_unlock>
 8006768:	42a3      	cmp	r3, r4
 800676a:	d908      	bls.n	800677e <_free_r+0x42>
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	1821      	adds	r1, r4, r0
 8006770:	428b      	cmp	r3, r1
 8006772:	bf01      	itttt	eq
 8006774:	6819      	ldreq	r1, [r3, #0]
 8006776:	685b      	ldreq	r3, [r3, #4]
 8006778:	1809      	addeq	r1, r1, r0
 800677a:	6021      	streq	r1, [r4, #0]
 800677c:	e7ed      	b.n	800675a <_free_r+0x1e>
 800677e:	461a      	mov	r2, r3
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	b10b      	cbz	r3, 8006788 <_free_r+0x4c>
 8006784:	42a3      	cmp	r3, r4
 8006786:	d9fa      	bls.n	800677e <_free_r+0x42>
 8006788:	6811      	ldr	r1, [r2, #0]
 800678a:	1850      	adds	r0, r2, r1
 800678c:	42a0      	cmp	r0, r4
 800678e:	d10b      	bne.n	80067a8 <_free_r+0x6c>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	4401      	add	r1, r0
 8006794:	1850      	adds	r0, r2, r1
 8006796:	4283      	cmp	r3, r0
 8006798:	6011      	str	r1, [r2, #0]
 800679a:	d1e0      	bne.n	800675e <_free_r+0x22>
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	6053      	str	r3, [r2, #4]
 80067a2:	4408      	add	r0, r1
 80067a4:	6010      	str	r0, [r2, #0]
 80067a6:	e7da      	b.n	800675e <_free_r+0x22>
 80067a8:	d902      	bls.n	80067b0 <_free_r+0x74>
 80067aa:	230c      	movs	r3, #12
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	e7d6      	b.n	800675e <_free_r+0x22>
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	1821      	adds	r1, r4, r0
 80067b4:	428b      	cmp	r3, r1
 80067b6:	bf04      	itt	eq
 80067b8:	6819      	ldreq	r1, [r3, #0]
 80067ba:	685b      	ldreq	r3, [r3, #4]
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	bf04      	itt	eq
 80067c0:	1809      	addeq	r1, r1, r0
 80067c2:	6021      	streq	r1, [r4, #0]
 80067c4:	6054      	str	r4, [r2, #4]
 80067c6:	e7ca      	b.n	800675e <_free_r+0x22>
 80067c8:	bd38      	pop	{r3, r4, r5, pc}
 80067ca:	bf00      	nop
 80067cc:	20000348 	.word	0x20000348

080067d0 <sbrk_aligned>:
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006810 <sbrk_aligned+0x40>)
 80067d4:	460c      	mov	r4, r1
 80067d6:	6831      	ldr	r1, [r6, #0]
 80067d8:	4605      	mov	r5, r0
 80067da:	b911      	cbnz	r1, 80067e2 <sbrk_aligned+0x12>
 80067dc:	f000 fba6 	bl	8006f2c <_sbrk_r>
 80067e0:	6030      	str	r0, [r6, #0]
 80067e2:	4621      	mov	r1, r4
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 fba1 	bl	8006f2c <_sbrk_r>
 80067ea:	1c43      	adds	r3, r0, #1
 80067ec:	d103      	bne.n	80067f6 <sbrk_aligned+0x26>
 80067ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80067f2:	4620      	mov	r0, r4
 80067f4:	bd70      	pop	{r4, r5, r6, pc}
 80067f6:	1cc4      	adds	r4, r0, #3
 80067f8:	f024 0403 	bic.w	r4, r4, #3
 80067fc:	42a0      	cmp	r0, r4
 80067fe:	d0f8      	beq.n	80067f2 <sbrk_aligned+0x22>
 8006800:	1a21      	subs	r1, r4, r0
 8006802:	4628      	mov	r0, r5
 8006804:	f000 fb92 	bl	8006f2c <_sbrk_r>
 8006808:	3001      	adds	r0, #1
 800680a:	d1f2      	bne.n	80067f2 <sbrk_aligned+0x22>
 800680c:	e7ef      	b.n	80067ee <sbrk_aligned+0x1e>
 800680e:	bf00      	nop
 8006810:	20000344 	.word	0x20000344

08006814 <_malloc_r>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	1ccd      	adds	r5, r1, #3
 800681a:	f025 0503 	bic.w	r5, r5, #3
 800681e:	3508      	adds	r5, #8
 8006820:	2d0c      	cmp	r5, #12
 8006822:	bf38      	it	cc
 8006824:	250c      	movcc	r5, #12
 8006826:	2d00      	cmp	r5, #0
 8006828:	4606      	mov	r6, r0
 800682a:	db01      	blt.n	8006830 <_malloc_r+0x1c>
 800682c:	42a9      	cmp	r1, r5
 800682e:	d904      	bls.n	800683a <_malloc_r+0x26>
 8006830:	230c      	movs	r3, #12
 8006832:	6033      	str	r3, [r6, #0]
 8006834:	2000      	movs	r0, #0
 8006836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800683a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006910 <_malloc_r+0xfc>
 800683e:	f000 f869 	bl	8006914 <__malloc_lock>
 8006842:	f8d8 3000 	ldr.w	r3, [r8]
 8006846:	461c      	mov	r4, r3
 8006848:	bb44      	cbnz	r4, 800689c <_malloc_r+0x88>
 800684a:	4629      	mov	r1, r5
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff ffbf 	bl	80067d0 <sbrk_aligned>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	4604      	mov	r4, r0
 8006856:	d158      	bne.n	800690a <_malloc_r+0xf6>
 8006858:	f8d8 4000 	ldr.w	r4, [r8]
 800685c:	4627      	mov	r7, r4
 800685e:	2f00      	cmp	r7, #0
 8006860:	d143      	bne.n	80068ea <_malloc_r+0xd6>
 8006862:	2c00      	cmp	r4, #0
 8006864:	d04b      	beq.n	80068fe <_malloc_r+0xea>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	4639      	mov	r1, r7
 800686a:	4630      	mov	r0, r6
 800686c:	eb04 0903 	add.w	r9, r4, r3
 8006870:	f000 fb5c 	bl	8006f2c <_sbrk_r>
 8006874:	4581      	cmp	r9, r0
 8006876:	d142      	bne.n	80068fe <_malloc_r+0xea>
 8006878:	6821      	ldr	r1, [r4, #0]
 800687a:	1a6d      	subs	r5, r5, r1
 800687c:	4629      	mov	r1, r5
 800687e:	4630      	mov	r0, r6
 8006880:	f7ff ffa6 	bl	80067d0 <sbrk_aligned>
 8006884:	3001      	adds	r0, #1
 8006886:	d03a      	beq.n	80068fe <_malloc_r+0xea>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	442b      	add	r3, r5
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	f8d8 3000 	ldr.w	r3, [r8]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	bb62      	cbnz	r2, 80068f0 <_malloc_r+0xdc>
 8006896:	f8c8 7000 	str.w	r7, [r8]
 800689a:	e00f      	b.n	80068bc <_malloc_r+0xa8>
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	1b52      	subs	r2, r2, r5
 80068a0:	d420      	bmi.n	80068e4 <_malloc_r+0xd0>
 80068a2:	2a0b      	cmp	r2, #11
 80068a4:	d917      	bls.n	80068d6 <_malloc_r+0xc2>
 80068a6:	1961      	adds	r1, r4, r5
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	6025      	str	r5, [r4, #0]
 80068ac:	bf18      	it	ne
 80068ae:	6059      	strne	r1, [r3, #4]
 80068b0:	6863      	ldr	r3, [r4, #4]
 80068b2:	bf08      	it	eq
 80068b4:	f8c8 1000 	streq.w	r1, [r8]
 80068b8:	5162      	str	r2, [r4, r5]
 80068ba:	604b      	str	r3, [r1, #4]
 80068bc:	4630      	mov	r0, r6
 80068be:	f000 f82f 	bl	8006920 <__malloc_unlock>
 80068c2:	f104 000b 	add.w	r0, r4, #11
 80068c6:	1d23      	adds	r3, r4, #4
 80068c8:	f020 0007 	bic.w	r0, r0, #7
 80068cc:	1ac2      	subs	r2, r0, r3
 80068ce:	bf1c      	itt	ne
 80068d0:	1a1b      	subne	r3, r3, r0
 80068d2:	50a3      	strne	r3, [r4, r2]
 80068d4:	e7af      	b.n	8006836 <_malloc_r+0x22>
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	42a3      	cmp	r3, r4
 80068da:	bf0c      	ite	eq
 80068dc:	f8c8 2000 	streq.w	r2, [r8]
 80068e0:	605a      	strne	r2, [r3, #4]
 80068e2:	e7eb      	b.n	80068bc <_malloc_r+0xa8>
 80068e4:	4623      	mov	r3, r4
 80068e6:	6864      	ldr	r4, [r4, #4]
 80068e8:	e7ae      	b.n	8006848 <_malloc_r+0x34>
 80068ea:	463c      	mov	r4, r7
 80068ec:	687f      	ldr	r7, [r7, #4]
 80068ee:	e7b6      	b.n	800685e <_malloc_r+0x4a>
 80068f0:	461a      	mov	r2, r3
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	d1fb      	bne.n	80068f0 <_malloc_r+0xdc>
 80068f8:	2300      	movs	r3, #0
 80068fa:	6053      	str	r3, [r2, #4]
 80068fc:	e7de      	b.n	80068bc <_malloc_r+0xa8>
 80068fe:	230c      	movs	r3, #12
 8006900:	6033      	str	r3, [r6, #0]
 8006902:	4630      	mov	r0, r6
 8006904:	f000 f80c 	bl	8006920 <__malloc_unlock>
 8006908:	e794      	b.n	8006834 <_malloc_r+0x20>
 800690a:	6005      	str	r5, [r0, #0]
 800690c:	e7d6      	b.n	80068bc <_malloc_r+0xa8>
 800690e:	bf00      	nop
 8006910:	20000348 	.word	0x20000348

08006914 <__malloc_lock>:
 8006914:	4801      	ldr	r0, [pc, #4]	@ (800691c <__malloc_lock+0x8>)
 8006916:	f7ff bf01 	b.w	800671c <__retarget_lock_acquire_recursive>
 800691a:	bf00      	nop
 800691c:	20000340 	.word	0x20000340

08006920 <__malloc_unlock>:
 8006920:	4801      	ldr	r0, [pc, #4]	@ (8006928 <__malloc_unlock+0x8>)
 8006922:	f7ff befc 	b.w	800671e <__retarget_lock_release_recursive>
 8006926:	bf00      	nop
 8006928:	20000340 	.word	0x20000340

0800692c <__ssputs_r>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	688e      	ldr	r6, [r1, #8]
 8006932:	461f      	mov	r7, r3
 8006934:	42be      	cmp	r6, r7
 8006936:	680b      	ldr	r3, [r1, #0]
 8006938:	4682      	mov	sl, r0
 800693a:	460c      	mov	r4, r1
 800693c:	4690      	mov	r8, r2
 800693e:	d82d      	bhi.n	800699c <__ssputs_r+0x70>
 8006940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006948:	d026      	beq.n	8006998 <__ssputs_r+0x6c>
 800694a:	6965      	ldr	r5, [r4, #20]
 800694c:	6909      	ldr	r1, [r1, #16]
 800694e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006952:	eba3 0901 	sub.w	r9, r3, r1
 8006956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800695a:	1c7b      	adds	r3, r7, #1
 800695c:	444b      	add	r3, r9
 800695e:	106d      	asrs	r5, r5, #1
 8006960:	429d      	cmp	r5, r3
 8006962:	bf38      	it	cc
 8006964:	461d      	movcc	r5, r3
 8006966:	0553      	lsls	r3, r2, #21
 8006968:	d527      	bpl.n	80069ba <__ssputs_r+0x8e>
 800696a:	4629      	mov	r1, r5
 800696c:	f7ff ff52 	bl	8006814 <_malloc_r>
 8006970:	4606      	mov	r6, r0
 8006972:	b360      	cbz	r0, 80069ce <__ssputs_r+0xa2>
 8006974:	6921      	ldr	r1, [r4, #16]
 8006976:	464a      	mov	r2, r9
 8006978:	f7ff fed2 	bl	8006720 <memcpy>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	6126      	str	r6, [r4, #16]
 800698a:	6165      	str	r5, [r4, #20]
 800698c:	444e      	add	r6, r9
 800698e:	eba5 0509 	sub.w	r5, r5, r9
 8006992:	6026      	str	r6, [r4, #0]
 8006994:	60a5      	str	r5, [r4, #8]
 8006996:	463e      	mov	r6, r7
 8006998:	42be      	cmp	r6, r7
 800699a:	d900      	bls.n	800699e <__ssputs_r+0x72>
 800699c:	463e      	mov	r6, r7
 800699e:	6820      	ldr	r0, [r4, #0]
 80069a0:	4632      	mov	r2, r6
 80069a2:	4641      	mov	r1, r8
 80069a4:	f000 faa8 	bl	8006ef8 <memmove>
 80069a8:	68a3      	ldr	r3, [r4, #8]
 80069aa:	1b9b      	subs	r3, r3, r6
 80069ac:	60a3      	str	r3, [r4, #8]
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	4433      	add	r3, r6
 80069b2:	6023      	str	r3, [r4, #0]
 80069b4:	2000      	movs	r0, #0
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	462a      	mov	r2, r5
 80069bc:	f000 fac6 	bl	8006f4c <_realloc_r>
 80069c0:	4606      	mov	r6, r0
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d1e0      	bne.n	8006988 <__ssputs_r+0x5c>
 80069c6:	6921      	ldr	r1, [r4, #16]
 80069c8:	4650      	mov	r0, sl
 80069ca:	f7ff feb7 	bl	800673c <_free_r>
 80069ce:	230c      	movs	r3, #12
 80069d0:	f8ca 3000 	str.w	r3, [sl]
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069e0:	e7e9      	b.n	80069b6 <__ssputs_r+0x8a>
	...

080069e4 <_svfiprintf_r>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	4698      	mov	r8, r3
 80069ea:	898b      	ldrh	r3, [r1, #12]
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	b09d      	sub	sp, #116	@ 0x74
 80069f0:	4607      	mov	r7, r0
 80069f2:	460d      	mov	r5, r1
 80069f4:	4614      	mov	r4, r2
 80069f6:	d510      	bpl.n	8006a1a <_svfiprintf_r+0x36>
 80069f8:	690b      	ldr	r3, [r1, #16]
 80069fa:	b973      	cbnz	r3, 8006a1a <_svfiprintf_r+0x36>
 80069fc:	2140      	movs	r1, #64	@ 0x40
 80069fe:	f7ff ff09 	bl	8006814 <_malloc_r>
 8006a02:	6028      	str	r0, [r5, #0]
 8006a04:	6128      	str	r0, [r5, #16]
 8006a06:	b930      	cbnz	r0, 8006a16 <_svfiprintf_r+0x32>
 8006a08:	230c      	movs	r3, #12
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a10:	b01d      	add	sp, #116	@ 0x74
 8006a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a16:	2340      	movs	r3, #64	@ 0x40
 8006a18:	616b      	str	r3, [r5, #20]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a1e:	2320      	movs	r3, #32
 8006a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a28:	2330      	movs	r3, #48	@ 0x30
 8006a2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bc8 <_svfiprintf_r+0x1e4>
 8006a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a32:	f04f 0901 	mov.w	r9, #1
 8006a36:	4623      	mov	r3, r4
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a3e:	b10a      	cbz	r2, 8006a44 <_svfiprintf_r+0x60>
 8006a40:	2a25      	cmp	r2, #37	@ 0x25
 8006a42:	d1f9      	bne.n	8006a38 <_svfiprintf_r+0x54>
 8006a44:	ebba 0b04 	subs.w	fp, sl, r4
 8006a48:	d00b      	beq.n	8006a62 <_svfiprintf_r+0x7e>
 8006a4a:	465b      	mov	r3, fp
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff ff6b 	bl	800692c <__ssputs_r>
 8006a56:	3001      	adds	r0, #1
 8006a58:	f000 80a7 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a5e:	445a      	add	r2, fp
 8006a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a62:	f89a 3000 	ldrb.w	r3, [sl]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 809f 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a76:	f10a 0a01 	add.w	sl, sl, #1
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	9307      	str	r3, [sp, #28]
 8006a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a84:	4654      	mov	r4, sl
 8006a86:	2205      	movs	r2, #5
 8006a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8c:	484e      	ldr	r0, [pc, #312]	@ (8006bc8 <_svfiprintf_r+0x1e4>)
 8006a8e:	f7f9 fb7f 	bl	8000190 <memchr>
 8006a92:	9a04      	ldr	r2, [sp, #16]
 8006a94:	b9d8      	cbnz	r0, 8006ace <_svfiprintf_r+0xea>
 8006a96:	06d0      	lsls	r0, r2, #27
 8006a98:	bf44      	itt	mi
 8006a9a:	2320      	movmi	r3, #32
 8006a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aa0:	0711      	lsls	r1, r2, #28
 8006aa2:	bf44      	itt	mi
 8006aa4:	232b      	movmi	r3, #43	@ 0x2b
 8006aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ab0:	d015      	beq.n	8006ade <_svfiprintf_r+0xfa>
 8006ab2:	9a07      	ldr	r2, [sp, #28]
 8006ab4:	4654      	mov	r4, sl
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	f04f 0c0a 	mov.w	ip, #10
 8006abc:	4621      	mov	r1, r4
 8006abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac2:	3b30      	subs	r3, #48	@ 0x30
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d94b      	bls.n	8006b60 <_svfiprintf_r+0x17c>
 8006ac8:	b1b0      	cbz	r0, 8006af8 <_svfiprintf_r+0x114>
 8006aca:	9207      	str	r2, [sp, #28]
 8006acc:	e014      	b.n	8006af8 <_svfiprintf_r+0x114>
 8006ace:	eba0 0308 	sub.w	r3, r0, r8
 8006ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	46a2      	mov	sl, r4
 8006adc:	e7d2      	b.n	8006a84 <_svfiprintf_r+0xa0>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	1d19      	adds	r1, r3, #4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	9103      	str	r1, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfbb      	ittet	lt
 8006aea:	425b      	neglt	r3, r3
 8006aec:	f042 0202 	orrlt.w	r2, r2, #2
 8006af0:	9307      	strge	r3, [sp, #28]
 8006af2:	9307      	strlt	r3, [sp, #28]
 8006af4:	bfb8      	it	lt
 8006af6:	9204      	strlt	r2, [sp, #16]
 8006af8:	7823      	ldrb	r3, [r4, #0]
 8006afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006afc:	d10a      	bne.n	8006b14 <_svfiprintf_r+0x130>
 8006afe:	7863      	ldrb	r3, [r4, #1]
 8006b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b02:	d132      	bne.n	8006b6a <_svfiprintf_r+0x186>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	9203      	str	r2, [sp, #12]
 8006b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b10:	3402      	adds	r4, #2
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006bcc <_svfiprintf_r+0x1e8>
 8006b18:	7821      	ldrb	r1, [r4, #0]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	f7f9 fb37 	bl	8000190 <memchr>
 8006b22:	b138      	cbz	r0, 8006b34 <_svfiprintf_r+0x150>
 8006b24:	9b04      	ldr	r3, [sp, #16]
 8006b26:	eba0 000a 	sub.w	r0, r0, sl
 8006b2a:	2240      	movs	r2, #64	@ 0x40
 8006b2c:	4082      	lsls	r2, r0
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	3401      	adds	r4, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b38:	4825      	ldr	r0, [pc, #148]	@ (8006bd0 <_svfiprintf_r+0x1ec>)
 8006b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b3e:	2206      	movs	r2, #6
 8006b40:	f7f9 fb26 	bl	8000190 <memchr>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d036      	beq.n	8006bb6 <_svfiprintf_r+0x1d2>
 8006b48:	4b22      	ldr	r3, [pc, #136]	@ (8006bd4 <_svfiprintf_r+0x1f0>)
 8006b4a:	bb1b      	cbnz	r3, 8006b94 <_svfiprintf_r+0x1b0>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	3307      	adds	r3, #7
 8006b50:	f023 0307 	bic.w	r3, r3, #7
 8006b54:	3308      	adds	r3, #8
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5a:	4433      	add	r3, r6
 8006b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5e:	e76a      	b.n	8006a36 <_svfiprintf_r+0x52>
 8006b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b64:	460c      	mov	r4, r1
 8006b66:	2001      	movs	r0, #1
 8006b68:	e7a8      	b.n	8006abc <_svfiprintf_r+0xd8>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	3401      	adds	r4, #1
 8006b6e:	9305      	str	r3, [sp, #20]
 8006b70:	4619      	mov	r1, r3
 8006b72:	f04f 0c0a 	mov.w	ip, #10
 8006b76:	4620      	mov	r0, r4
 8006b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b7c:	3a30      	subs	r2, #48	@ 0x30
 8006b7e:	2a09      	cmp	r2, #9
 8006b80:	d903      	bls.n	8006b8a <_svfiprintf_r+0x1a6>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0c6      	beq.n	8006b14 <_svfiprintf_r+0x130>
 8006b86:	9105      	str	r1, [sp, #20]
 8006b88:	e7c4      	b.n	8006b14 <_svfiprintf_r+0x130>
 8006b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b8e:	4604      	mov	r4, r0
 8006b90:	2301      	movs	r3, #1
 8006b92:	e7f0      	b.n	8006b76 <_svfiprintf_r+0x192>
 8006b94:	ab03      	add	r3, sp, #12
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd8 <_svfiprintf_r+0x1f4>)
 8006b9c:	a904      	add	r1, sp, #16
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f3af 8000 	nop.w
 8006ba4:	1c42      	adds	r2, r0, #1
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	d1d6      	bne.n	8006b58 <_svfiprintf_r+0x174>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	065b      	lsls	r3, r3, #25
 8006bae:	f53f af2d 	bmi.w	8006a0c <_svfiprintf_r+0x28>
 8006bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bb4:	e72c      	b.n	8006a10 <_svfiprintf_r+0x2c>
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <_svfiprintf_r+0x1f4>)
 8006bbe:	a904      	add	r1, sp, #16
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f000 f879 	bl	8006cb8 <_printf_i>
 8006bc6:	e7ed      	b.n	8006ba4 <_svfiprintf_r+0x1c0>
 8006bc8:	080071dc 	.word	0x080071dc
 8006bcc:	080071e2 	.word	0x080071e2
 8006bd0:	080071e6 	.word	0x080071e6
 8006bd4:	00000000 	.word	0x00000000
 8006bd8:	0800692d 	.word	0x0800692d

08006bdc <_printf_common>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	4616      	mov	r6, r2
 8006be2:	4698      	mov	r8, r3
 8006be4:	688a      	ldr	r2, [r1, #8]
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	bfb8      	it	lt
 8006bf0:	4613      	movlt	r3, r2
 8006bf2:	6033      	str	r3, [r6, #0]
 8006bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b10a      	cbz	r2, 8006c02 <_printf_common+0x26>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	0699      	lsls	r1, r3, #26
 8006c06:	bf42      	ittt	mi
 8006c08:	6833      	ldrmi	r3, [r6, #0]
 8006c0a:	3302      	addmi	r3, #2
 8006c0c:	6033      	strmi	r3, [r6, #0]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	f015 0506 	ands.w	r5, r5, #6
 8006c14:	d106      	bne.n	8006c24 <_printf_common+0x48>
 8006c16:	f104 0a19 	add.w	sl, r4, #25
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	6832      	ldr	r2, [r6, #0]
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dc26      	bgt.n	8006c72 <_printf_common+0x96>
 8006c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	3b00      	subs	r3, #0
 8006c2c:	bf18      	it	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	0692      	lsls	r2, r2, #26
 8006c32:	d42b      	bmi.n	8006c8c <_printf_common+0xb0>
 8006c34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c38:	4641      	mov	r1, r8
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	47c8      	blx	r9
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d01e      	beq.n	8006c80 <_printf_common+0xa4>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	6922      	ldr	r2, [r4, #16]
 8006c46:	f003 0306 	and.w	r3, r3, #6
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	bf02      	ittt	eq
 8006c4e:	68e5      	ldreq	r5, [r4, #12]
 8006c50:	6833      	ldreq	r3, [r6, #0]
 8006c52:	1aed      	subeq	r5, r5, r3
 8006c54:	68a3      	ldr	r3, [r4, #8]
 8006c56:	bf0c      	ite	eq
 8006c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c5c:	2500      	movne	r5, #0
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	bfc4      	itt	gt
 8006c62:	1a9b      	subgt	r3, r3, r2
 8006c64:	18ed      	addgt	r5, r5, r3
 8006c66:	2600      	movs	r6, #0
 8006c68:	341a      	adds	r4, #26
 8006c6a:	42b5      	cmp	r5, r6
 8006c6c:	d11a      	bne.n	8006ca4 <_printf_common+0xc8>
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e008      	b.n	8006c84 <_printf_common+0xa8>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4652      	mov	r2, sl
 8006c76:	4641      	mov	r1, r8
 8006c78:	4638      	mov	r0, r7
 8006c7a:	47c8      	blx	r9
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d103      	bne.n	8006c88 <_printf_common+0xac>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c88:	3501      	adds	r5, #1
 8006c8a:	e7c6      	b.n	8006c1a <_printf_common+0x3e>
 8006c8c:	18e1      	adds	r1, r4, r3
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	2030      	movs	r0, #48	@ 0x30
 8006c92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c96:	4422      	add	r2, r4
 8006c98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	e7c7      	b.n	8006c34 <_printf_common+0x58>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4622      	mov	r2, r4
 8006ca8:	4641      	mov	r1, r8
 8006caa:	4638      	mov	r0, r7
 8006cac:	47c8      	blx	r9
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d0e6      	beq.n	8006c80 <_printf_common+0xa4>
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	e7d9      	b.n	8006c6a <_printf_common+0x8e>
	...

08006cb8 <_printf_i>:
 8006cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	7e0f      	ldrb	r7, [r1, #24]
 8006cbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cc0:	2f78      	cmp	r7, #120	@ 0x78
 8006cc2:	4691      	mov	r9, r2
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	469a      	mov	sl, r3
 8006cca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cce:	d807      	bhi.n	8006ce0 <_printf_i+0x28>
 8006cd0:	2f62      	cmp	r7, #98	@ 0x62
 8006cd2:	d80a      	bhi.n	8006cea <_printf_i+0x32>
 8006cd4:	2f00      	cmp	r7, #0
 8006cd6:	f000 80d2 	beq.w	8006e7e <_printf_i+0x1c6>
 8006cda:	2f58      	cmp	r7, #88	@ 0x58
 8006cdc:	f000 80b9 	beq.w	8006e52 <_printf_i+0x19a>
 8006ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ce4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ce8:	e03a      	b.n	8006d60 <_printf_i+0xa8>
 8006cea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cee:	2b15      	cmp	r3, #21
 8006cf0:	d8f6      	bhi.n	8006ce0 <_printf_i+0x28>
 8006cf2:	a101      	add	r1, pc, #4	@ (adr r1, 8006cf8 <_printf_i+0x40>)
 8006cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cf8:	08006d51 	.word	0x08006d51
 8006cfc:	08006d65 	.word	0x08006d65
 8006d00:	08006ce1 	.word	0x08006ce1
 8006d04:	08006ce1 	.word	0x08006ce1
 8006d08:	08006ce1 	.word	0x08006ce1
 8006d0c:	08006ce1 	.word	0x08006ce1
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006ce1 	.word	0x08006ce1
 8006d18:	08006ce1 	.word	0x08006ce1
 8006d1c:	08006ce1 	.word	0x08006ce1
 8006d20:	08006ce1 	.word	0x08006ce1
 8006d24:	08006e65 	.word	0x08006e65
 8006d28:	08006d8f 	.word	0x08006d8f
 8006d2c:	08006e1f 	.word	0x08006e1f
 8006d30:	08006ce1 	.word	0x08006ce1
 8006d34:	08006ce1 	.word	0x08006ce1
 8006d38:	08006e87 	.word	0x08006e87
 8006d3c:	08006ce1 	.word	0x08006ce1
 8006d40:	08006d8f 	.word	0x08006d8f
 8006d44:	08006ce1 	.word	0x08006ce1
 8006d48:	08006ce1 	.word	0x08006ce1
 8006d4c:	08006e27 	.word	0x08006e27
 8006d50:	6833      	ldr	r3, [r6, #0]
 8006d52:	1d1a      	adds	r2, r3, #4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6032      	str	r2, [r6, #0]
 8006d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d60:	2301      	movs	r3, #1
 8006d62:	e09d      	b.n	8006ea0 <_printf_i+0x1e8>
 8006d64:	6833      	ldr	r3, [r6, #0]
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	1d19      	adds	r1, r3, #4
 8006d6a:	6031      	str	r1, [r6, #0]
 8006d6c:	0606      	lsls	r6, r0, #24
 8006d6e:	d501      	bpl.n	8006d74 <_printf_i+0xbc>
 8006d70:	681d      	ldr	r5, [r3, #0]
 8006d72:	e003      	b.n	8006d7c <_printf_i+0xc4>
 8006d74:	0645      	lsls	r5, r0, #25
 8006d76:	d5fb      	bpl.n	8006d70 <_printf_i+0xb8>
 8006d78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d7c:	2d00      	cmp	r5, #0
 8006d7e:	da03      	bge.n	8006d88 <_printf_i+0xd0>
 8006d80:	232d      	movs	r3, #45	@ 0x2d
 8006d82:	426d      	negs	r5, r5
 8006d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d88:	4859      	ldr	r0, [pc, #356]	@ (8006ef0 <_printf_i+0x238>)
 8006d8a:	230a      	movs	r3, #10
 8006d8c:	e011      	b.n	8006db2 <_printf_i+0xfa>
 8006d8e:	6821      	ldr	r1, [r4, #0]
 8006d90:	6833      	ldr	r3, [r6, #0]
 8006d92:	0608      	lsls	r0, r1, #24
 8006d94:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d98:	d402      	bmi.n	8006da0 <_printf_i+0xe8>
 8006d9a:	0649      	lsls	r1, r1, #25
 8006d9c:	bf48      	it	mi
 8006d9e:	b2ad      	uxthmi	r5, r5
 8006da0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006da2:	4853      	ldr	r0, [pc, #332]	@ (8006ef0 <_printf_i+0x238>)
 8006da4:	6033      	str	r3, [r6, #0]
 8006da6:	bf14      	ite	ne
 8006da8:	230a      	movne	r3, #10
 8006daa:	2308      	moveq	r3, #8
 8006dac:	2100      	movs	r1, #0
 8006dae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006db2:	6866      	ldr	r6, [r4, #4]
 8006db4:	60a6      	str	r6, [r4, #8]
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	bfa2      	ittt	ge
 8006dba:	6821      	ldrge	r1, [r4, #0]
 8006dbc:	f021 0104 	bicge.w	r1, r1, #4
 8006dc0:	6021      	strge	r1, [r4, #0]
 8006dc2:	b90d      	cbnz	r5, 8006dc8 <_printf_i+0x110>
 8006dc4:	2e00      	cmp	r6, #0
 8006dc6:	d04b      	beq.n	8006e60 <_printf_i+0x1a8>
 8006dc8:	4616      	mov	r6, r2
 8006dca:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dce:	fb03 5711 	mls	r7, r3, r1, r5
 8006dd2:	5dc7      	ldrb	r7, [r0, r7]
 8006dd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dd8:	462f      	mov	r7, r5
 8006dda:	42bb      	cmp	r3, r7
 8006ddc:	460d      	mov	r5, r1
 8006dde:	d9f4      	bls.n	8006dca <_printf_i+0x112>
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d10b      	bne.n	8006dfc <_printf_i+0x144>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	07df      	lsls	r7, r3, #31
 8006de8:	d508      	bpl.n	8006dfc <_printf_i+0x144>
 8006dea:	6923      	ldr	r3, [r4, #16]
 8006dec:	6861      	ldr	r1, [r4, #4]
 8006dee:	4299      	cmp	r1, r3
 8006df0:	bfde      	ittt	le
 8006df2:	2330      	movle	r3, #48	@ 0x30
 8006df4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006df8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006dfc:	1b92      	subs	r2, r2, r6
 8006dfe:	6122      	str	r2, [r4, #16]
 8006e00:	f8cd a000 	str.w	sl, [sp]
 8006e04:	464b      	mov	r3, r9
 8006e06:	aa03      	add	r2, sp, #12
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	f7ff fee6 	bl	8006bdc <_printf_common>
 8006e10:	3001      	adds	r0, #1
 8006e12:	d14a      	bne.n	8006eaa <_printf_i+0x1f2>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e18:	b004      	add	sp, #16
 8006e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	f043 0320 	orr.w	r3, r3, #32
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	4833      	ldr	r0, [pc, #204]	@ (8006ef4 <_printf_i+0x23c>)
 8006e28:	2778      	movs	r7, #120	@ 0x78
 8006e2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	6831      	ldr	r1, [r6, #0]
 8006e32:	061f      	lsls	r7, r3, #24
 8006e34:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e38:	d402      	bmi.n	8006e40 <_printf_i+0x188>
 8006e3a:	065f      	lsls	r7, r3, #25
 8006e3c:	bf48      	it	mi
 8006e3e:	b2ad      	uxthmi	r5, r5
 8006e40:	6031      	str	r1, [r6, #0]
 8006e42:	07d9      	lsls	r1, r3, #31
 8006e44:	bf44      	itt	mi
 8006e46:	f043 0320 	orrmi.w	r3, r3, #32
 8006e4a:	6023      	strmi	r3, [r4, #0]
 8006e4c:	b11d      	cbz	r5, 8006e56 <_printf_i+0x19e>
 8006e4e:	2310      	movs	r3, #16
 8006e50:	e7ac      	b.n	8006dac <_printf_i+0xf4>
 8006e52:	4827      	ldr	r0, [pc, #156]	@ (8006ef0 <_printf_i+0x238>)
 8006e54:	e7e9      	b.n	8006e2a <_printf_i+0x172>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	f023 0320 	bic.w	r3, r3, #32
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	e7f6      	b.n	8006e4e <_printf_i+0x196>
 8006e60:	4616      	mov	r6, r2
 8006e62:	e7bd      	b.n	8006de0 <_printf_i+0x128>
 8006e64:	6833      	ldr	r3, [r6, #0]
 8006e66:	6825      	ldr	r5, [r4, #0]
 8006e68:	6961      	ldr	r1, [r4, #20]
 8006e6a:	1d18      	adds	r0, r3, #4
 8006e6c:	6030      	str	r0, [r6, #0]
 8006e6e:	062e      	lsls	r6, r5, #24
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	d501      	bpl.n	8006e78 <_printf_i+0x1c0>
 8006e74:	6019      	str	r1, [r3, #0]
 8006e76:	e002      	b.n	8006e7e <_printf_i+0x1c6>
 8006e78:	0668      	lsls	r0, r5, #25
 8006e7a:	d5fb      	bpl.n	8006e74 <_printf_i+0x1bc>
 8006e7c:	8019      	strh	r1, [r3, #0]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	4616      	mov	r6, r2
 8006e84:	e7bc      	b.n	8006e00 <_printf_i+0x148>
 8006e86:	6833      	ldr	r3, [r6, #0]
 8006e88:	1d1a      	adds	r2, r3, #4
 8006e8a:	6032      	str	r2, [r6, #0]
 8006e8c:	681e      	ldr	r6, [r3, #0]
 8006e8e:	6862      	ldr	r2, [r4, #4]
 8006e90:	2100      	movs	r1, #0
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7f9 f97c 	bl	8000190 <memchr>
 8006e98:	b108      	cbz	r0, 8006e9e <_printf_i+0x1e6>
 8006e9a:	1b80      	subs	r0, r0, r6
 8006e9c:	6060      	str	r0, [r4, #4]
 8006e9e:	6863      	ldr	r3, [r4, #4]
 8006ea0:	6123      	str	r3, [r4, #16]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ea8:	e7aa      	b.n	8006e00 <_printf_i+0x148>
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	4632      	mov	r2, r6
 8006eae:	4649      	mov	r1, r9
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	47d0      	blx	sl
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d0ad      	beq.n	8006e14 <_printf_i+0x15c>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	079b      	lsls	r3, r3, #30
 8006ebc:	d413      	bmi.n	8006ee6 <_printf_i+0x22e>
 8006ebe:	68e0      	ldr	r0, [r4, #12]
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	4298      	cmp	r0, r3
 8006ec4:	bfb8      	it	lt
 8006ec6:	4618      	movlt	r0, r3
 8006ec8:	e7a6      	b.n	8006e18 <_printf_i+0x160>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4632      	mov	r2, r6
 8006ece:	4649      	mov	r1, r9
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	47d0      	blx	sl
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d09d      	beq.n	8006e14 <_printf_i+0x15c>
 8006ed8:	3501      	adds	r5, #1
 8006eda:	68e3      	ldr	r3, [r4, #12]
 8006edc:	9903      	ldr	r1, [sp, #12]
 8006ede:	1a5b      	subs	r3, r3, r1
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	dcf2      	bgt.n	8006eca <_printf_i+0x212>
 8006ee4:	e7eb      	b.n	8006ebe <_printf_i+0x206>
 8006ee6:	2500      	movs	r5, #0
 8006ee8:	f104 0619 	add.w	r6, r4, #25
 8006eec:	e7f5      	b.n	8006eda <_printf_i+0x222>
 8006eee:	bf00      	nop
 8006ef0:	080071ed 	.word	0x080071ed
 8006ef4:	080071fe 	.word	0x080071fe

08006ef8 <memmove>:
 8006ef8:	4288      	cmp	r0, r1
 8006efa:	b510      	push	{r4, lr}
 8006efc:	eb01 0402 	add.w	r4, r1, r2
 8006f00:	d902      	bls.n	8006f08 <memmove+0x10>
 8006f02:	4284      	cmp	r4, r0
 8006f04:	4623      	mov	r3, r4
 8006f06:	d807      	bhi.n	8006f18 <memmove+0x20>
 8006f08:	1e43      	subs	r3, r0, #1
 8006f0a:	42a1      	cmp	r1, r4
 8006f0c:	d008      	beq.n	8006f20 <memmove+0x28>
 8006f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f16:	e7f8      	b.n	8006f0a <memmove+0x12>
 8006f18:	4402      	add	r2, r0
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	428a      	cmp	r2, r1
 8006f1e:	d100      	bne.n	8006f22 <memmove+0x2a>
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f2a:	e7f7      	b.n	8006f1c <memmove+0x24>

08006f2c <_sbrk_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d06      	ldr	r5, [pc, #24]	@ (8006f48 <_sbrk_r+0x1c>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	f7f9 ffc6 	bl	8000ec8 <_sbrk>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_sbrk_r+0x1a>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_sbrk_r+0x1a>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	2000033c 	.word	0x2000033c

08006f4c <_realloc_r>:
 8006f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f50:	4680      	mov	r8, r0
 8006f52:	4615      	mov	r5, r2
 8006f54:	460c      	mov	r4, r1
 8006f56:	b921      	cbnz	r1, 8006f62 <_realloc_r+0x16>
 8006f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	f7ff bc59 	b.w	8006814 <_malloc_r>
 8006f62:	b92a      	cbnz	r2, 8006f70 <_realloc_r+0x24>
 8006f64:	f7ff fbea 	bl	800673c <_free_r>
 8006f68:	2400      	movs	r4, #0
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f70:	f000 f81a 	bl	8006fa8 <_malloc_usable_size_r>
 8006f74:	4285      	cmp	r5, r0
 8006f76:	4606      	mov	r6, r0
 8006f78:	d802      	bhi.n	8006f80 <_realloc_r+0x34>
 8006f7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f7e:	d8f4      	bhi.n	8006f6a <_realloc_r+0x1e>
 8006f80:	4629      	mov	r1, r5
 8006f82:	4640      	mov	r0, r8
 8006f84:	f7ff fc46 	bl	8006814 <_malloc_r>
 8006f88:	4607      	mov	r7, r0
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d0ec      	beq.n	8006f68 <_realloc_r+0x1c>
 8006f8e:	42b5      	cmp	r5, r6
 8006f90:	462a      	mov	r2, r5
 8006f92:	4621      	mov	r1, r4
 8006f94:	bf28      	it	cs
 8006f96:	4632      	movcs	r2, r6
 8006f98:	f7ff fbc2 	bl	8006720 <memcpy>
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f7ff fbcc 	bl	800673c <_free_r>
 8006fa4:	463c      	mov	r4, r7
 8006fa6:	e7e0      	b.n	8006f6a <_realloc_r+0x1e>

08006fa8 <_malloc_usable_size_r>:
 8006fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fac:	1f18      	subs	r0, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bfbc      	itt	lt
 8006fb2:	580b      	ldrlt	r3, [r1, r0]
 8006fb4:	18c0      	addlt	r0, r0, r3
 8006fb6:	4770      	bx	lr

08006fb8 <_init>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_fini>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr
